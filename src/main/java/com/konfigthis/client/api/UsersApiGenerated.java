/*
 * Hyperplane API Gateway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ModelsBatchUserPersonasRequest;
import com.konfigthis.client.model.ModelsUserPersonasResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllFacetAttributesCall(ModelsBatchUserPersonasRequest modelsBatchUserPersonasRequest, String moduleId, String month, Double personaScoreThreshold, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelsBatchUserPersonasRequest;

        // create path and map variables
        String localVarPath = "/batch/user/personas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("month", month));
        }

        if (personaScoreThreshold != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("persona_score_threshold", personaScoreThreshold));
        }

        if (moduleId != null) {
            localVarHeaderParams.put("module-id", localVarApiClient.parameterToString(moduleId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllFacetAttributesValidateBeforeCall(ModelsBatchUserPersonasRequest modelsBatchUserPersonasRequest, String moduleId, String month, Double personaScoreThreshold, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelsBatchUserPersonasRequest' is set
        if (modelsBatchUserPersonasRequest == null) {
            throw new ApiException("Missing the required parameter 'modelsBatchUserPersonasRequest' when calling getAllFacetAttributes(Async)");
        }

        return getAllFacetAttributesCall(modelsBatchUserPersonasRequest, moduleId, month, personaScoreThreshold, _callback);

    }


    private ApiResponse<List<ModelsUserPersonasResponse>> getAllFacetAttributesWithHttpInfo(ModelsBatchUserPersonasRequest modelsBatchUserPersonasRequest, String moduleId, String month, Double personaScoreThreshold) throws ApiException {
        okhttp3.Call localVarCall = getAllFacetAttributesValidateBeforeCall(modelsBatchUserPersonasRequest, moduleId, month, personaScoreThreshold, null);
        Type localVarReturnType = new TypeToken<List<ModelsUserPersonasResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllFacetAttributesAsync(ModelsBatchUserPersonasRequest modelsBatchUserPersonasRequest, String moduleId, String month, Double personaScoreThreshold, final ApiCallback<List<ModelsUserPersonasResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllFacetAttributesValidateBeforeCall(modelsBatchUserPersonasRequest, moduleId, month, personaScoreThreshold, _callback);
        Type localVarReturnType = new TypeToken<List<ModelsUserPersonasResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllFacetAttributesRequestBuilder {
        private final List<String> userIds;
        private String moduleId;
        private String month;
        private Double personaScoreThreshold;

        private GetAllFacetAttributesRequestBuilder(List<String> userIds) {
            this.userIds = userIds;
        }

        /**
         * Set moduleId
         * @param moduleId Module ID (optional)
         * @return GetAllFacetAttributesRequestBuilder
         */
        public GetAllFacetAttributesRequestBuilder moduleId(String moduleId) {
            this.moduleId = moduleId;
            return this;
        }
        
        /**
         * Set month
         * @param month Reference month for persona scores in &#x60;YYYY-MM&#x60; format. (optional)
         * @return GetAllFacetAttributesRequestBuilder
         */
        public GetAllFacetAttributesRequestBuilder month(String month) {
            this.month = month;
            return this;
        }
        
        /**
         * Set personaScoreThreshold
         * @param personaScoreThreshold Minimum user persona score threshold to be included in the response. (optional)
         * @return GetAllFacetAttributesRequestBuilder
         */
        public GetAllFacetAttributesRequestBuilder personaScoreThreshold(Double personaScoreThreshold) {
            this.personaScoreThreshold = personaScoreThreshold;
            return this;
        }
        
        /**
         * Build call for getAllFacetAttributes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ModelsBatchUserPersonasRequest modelsBatchUserPersonasRequest = buildBodyParams();
            return getAllFacetAttributesCall(modelsBatchUserPersonasRequest, moduleId, month, personaScoreThreshold, _callback);
        }

        private ModelsBatchUserPersonasRequest buildBodyParams() {
            ModelsBatchUserPersonasRequest modelsBatchUserPersonasRequest = new ModelsBatchUserPersonasRequest();
            modelsBatchUserPersonasRequest.userIds(this.userIds);
            return modelsBatchUserPersonasRequest;
        }

        /**
         * Execute getAllFacetAttributes request
         * @return List&lt;ModelsUserPersonasResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public List<ModelsUserPersonasResponse> execute() throws ApiException {
            ModelsBatchUserPersonasRequest modelsBatchUserPersonasRequest = buildBodyParams();
            ApiResponse<List<ModelsUserPersonasResponse>> localVarResp = getAllFacetAttributesWithHttpInfo(modelsBatchUserPersonasRequest, moduleId, month, personaScoreThreshold);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllFacetAttributes request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ModelsUserPersonasResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ModelsUserPersonasResponse>> executeWithHttpInfo() throws ApiException {
            ModelsBatchUserPersonasRequest modelsBatchUserPersonasRequest = buildBodyParams();
            return getAllFacetAttributesWithHttpInfo(modelsBatchUserPersonasRequest, moduleId, month, personaScoreThreshold);
        }

        /**
         * Execute getAllFacetAttributes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ModelsUserPersonasResponse>> _callback) throws ApiException {
            ModelsBatchUserPersonasRequest modelsBatchUserPersonasRequest = buildBodyParams();
            return getAllFacetAttributesAsync(modelsBatchUserPersonasRequest, moduleId, month, personaScoreThreshold, _callback);
        }
    }

    /**
     * Get all the facet attributes for a list of users.
     * Returns all personas associated with a user.
     * @param modelsBatchUserPersonasRequest List of user IDs (required)
     * @return GetAllFacetAttributesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public GetAllFacetAttributesRequestBuilder getAllFacetAttributes(List<String> userIds) throws IllegalArgumentException {
        if (userIds == null) throw new IllegalArgumentException("\"userIds\" is required but got null");
        return new GetAllFacetAttributesRequestBuilder(userIds);
    }
    private okhttp3.Call listUserPersonasCall(String userId, String moduleId, String month, Double personaScoreThreshold, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/personas"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("month", month));
        }

        if (personaScoreThreshold != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("persona_score_threshold", personaScoreThreshold));
        }

        if (moduleId != null) {
            localVarHeaderParams.put("module-id", localVarApiClient.parameterToString(moduleId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserPersonasValidateBeforeCall(String userId, String moduleId, String month, Double personaScoreThreshold, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listUserPersonas(Async)");
        }

        return listUserPersonasCall(userId, moduleId, month, personaScoreThreshold, _callback);

    }


    private ApiResponse<ModelsUserPersonasResponse> listUserPersonasWithHttpInfo(String userId, String moduleId, String month, Double personaScoreThreshold) throws ApiException {
        okhttp3.Call localVarCall = listUserPersonasValidateBeforeCall(userId, moduleId, month, personaScoreThreshold, null);
        Type localVarReturnType = new TypeToken<ModelsUserPersonasResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUserPersonasAsync(String userId, String moduleId, String month, Double personaScoreThreshold, final ApiCallback<ModelsUserPersonasResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserPersonasValidateBeforeCall(userId, moduleId, month, personaScoreThreshold, _callback);
        Type localVarReturnType = new TypeToken<ModelsUserPersonasResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUserPersonasRequestBuilder {
        private final String userId;
        private String moduleId;
        private String month;
        private Double personaScoreThreshold;

        private ListUserPersonasRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set moduleId
         * @param moduleId Module ID (optional)
         * @return ListUserPersonasRequestBuilder
         */
        public ListUserPersonasRequestBuilder moduleId(String moduleId) {
            this.moduleId = moduleId;
            return this;
        }
        
        /**
         * Set month
         * @param month Reference month for persona scores in &#x60;YYYY-MM&#x60; format. (optional)
         * @return ListUserPersonasRequestBuilder
         */
        public ListUserPersonasRequestBuilder month(String month) {
            this.month = month;
            return this;
        }
        
        /**
         * Set personaScoreThreshold
         * @param personaScoreThreshold Minimum user persona score threshold to be included in the response. (optional)
         * @return ListUserPersonasRequestBuilder
         */
        public ListUserPersonasRequestBuilder personaScoreThreshold(Double personaScoreThreshold) {
            this.personaScoreThreshold = personaScoreThreshold;
            return this;
        }
        
        /**
         * Build call for listUserPersonas
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUserPersonasCall(userId, moduleId, month, personaScoreThreshold, _callback);
        }


        /**
         * Execute listUserPersonas request
         * @return ModelsUserPersonasResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ModelsUserPersonasResponse execute() throws ApiException {
            ApiResponse<ModelsUserPersonasResponse> localVarResp = listUserPersonasWithHttpInfo(userId, moduleId, month, personaScoreThreshold);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUserPersonas request with HTTP info returned
         * @return ApiResponse&lt;ModelsUserPersonasResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelsUserPersonasResponse> executeWithHttpInfo() throws ApiException {
            return listUserPersonasWithHttpInfo(userId, moduleId, month, personaScoreThreshold);
        }

        /**
         * Execute listUserPersonas request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelsUserPersonasResponse> _callback) throws ApiException {
            return listUserPersonasAsync(userId, moduleId, month, personaScoreThreshold, _callback);
        }
    }

    /**
     * List personas associated with a user.
     * Returns a list of personas and their scores for a given user. Personas are sorted by their persona score, in descending order.  You can also specify the minimum persona score threshold that a user must meet to be included in the response. Defaults to hyperplane&#39;s suggested threshold to determine if the user belongs to the persona.
     * @param userId User ID (required)
     * @return ListUserPersonasRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ListUserPersonasRequestBuilder listUserPersonas(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ListUserPersonasRequestBuilder(userId);
    }
}
