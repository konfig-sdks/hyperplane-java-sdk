/*
 * Hyperplane API Gateway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ModelsAutoMLBatchScoresCreateResponse;
import com.konfigthis.client.model.ModelsAutoMLLookalikeCreateRequest;
import com.konfigthis.client.model.ModelsAutoMLLookalikeCreateResponse;
import com.konfigthis.client.model.ModelsAutoMLRunGetIdResponse;
import com.konfigthis.client.model.ModelsAutoMLRunUsersGetRequest;
import com.konfigthis.client.model.ModelsAutoMLRunUsersGetResponse;
import com.konfigthis.client.model.ModelsAutoMLRunsGetResponse;
import com.konfigthis.client.model.ModelsAutoMLUsersGetResponse;
import com.konfigthis.client.model.ModelsLookalikeLabel;
import com.konfigthis.client.model.ModelsTagCategoricalAttributeFilter;
import com.konfigthis.client.model.ModelsUserMetadata;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AutoMlServiceApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AutoMlServiceApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AutoMlServiceApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createLookalikeRequestCall(ModelsAutoMLLookalikeCreateRequest modelsAutoMLLookalikeCreateRequest, String modelVersion, String moduleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelsAutoMLLookalikeCreateRequest;

        // create path and map variables
        String localVarPath = "/automl/lookalike";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modelVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model_version", modelVersion));
        }

        if (moduleId != null) {
            localVarHeaderParams.put("module-id", localVarApiClient.parameterToString(moduleId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLookalikeRequestValidateBeforeCall(ModelsAutoMLLookalikeCreateRequest modelsAutoMLLookalikeCreateRequest, String modelVersion, String moduleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelsAutoMLLookalikeCreateRequest' is set
        if (modelsAutoMLLookalikeCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'modelsAutoMLLookalikeCreateRequest' when calling createLookalikeRequest(Async)");
        }

        return createLookalikeRequestCall(modelsAutoMLLookalikeCreateRequest, modelVersion, moduleId, _callback);

    }


    private ApiResponse<ModelsAutoMLLookalikeCreateResponse> createLookalikeRequestWithHttpInfo(ModelsAutoMLLookalikeCreateRequest modelsAutoMLLookalikeCreateRequest, String modelVersion, String moduleId) throws ApiException {
        okhttp3.Call localVarCall = createLookalikeRequestValidateBeforeCall(modelsAutoMLLookalikeCreateRequest, modelVersion, moduleId, null);
        Type localVarReturnType = new TypeToken<ModelsAutoMLLookalikeCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createLookalikeRequestAsync(ModelsAutoMLLookalikeCreateRequest modelsAutoMLLookalikeCreateRequest, String modelVersion, String moduleId, final ApiCallback<ModelsAutoMLLookalikeCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLookalikeRequestValidateBeforeCall(modelsAutoMLLookalikeCreateRequest, modelVersion, moduleId, _callback);
        Type localVarReturnType = new TypeToken<ModelsAutoMLLookalikeCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateLookalikeRequestRequestBuilder {
        private final String engagementType;
        private final List<ModelsLookalikeLabel> positiveLabelUsers;
        private List<ModelsLookalikeLabel> negativeLabelUsers;
        private String runDescription;
        private String modelVersion;
        private String moduleId;

        private CreateLookalikeRequestRequestBuilder(String engagementType, List<ModelsLookalikeLabel> positiveLabelUsers) {
            this.engagementType = engagementType;
            this.positiveLabelUsers = positiveLabelUsers;
        }

        /**
         * Set negativeLabelUsers
         * @param negativeLabelUsers List of negative users in lookalike model. Model will be trained to identify users dissimilar to these users. If None, negative users will be generated from data. List length must be either 0 or greater than 10. (optional)
         * @return CreateLookalikeRequestRequestBuilder
         */
        public CreateLookalikeRequestRequestBuilder negativeLabelUsers(List<ModelsLookalikeLabel> negativeLabelUsers) {
            this.negativeLabelUsers = negativeLabelUsers;
            return this;
        }
        
        /**
         * Set runDescription
         * @param runDescription Custom run description to attach to run (optional)
         * @return CreateLookalikeRequestRequestBuilder
         */
        public CreateLookalikeRequestRequestBuilder runDescription(String runDescription) {
            this.runDescription = runDescription;
            return this;
        }
        
        /**
         * Set modelVersion
         * @param modelVersion Model Version (optional)
         * @return CreateLookalikeRequestRequestBuilder
         */
        public CreateLookalikeRequestRequestBuilder modelVersion(String modelVersion) {
            this.modelVersion = modelVersion;
            return this;
        }
        
        /**
         * Set moduleId
         * @param moduleId Module ID (optional)
         * @return CreateLookalikeRequestRequestBuilder
         */
        public CreateLookalikeRequestRequestBuilder moduleId(String moduleId) {
            this.moduleId = moduleId;
            return this;
        }
        
        /**
         * Build call for createLookalikeRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ModelsAutoMLLookalikeCreateRequest modelsAutoMLLookalikeCreateRequest = buildBodyParams();
            return createLookalikeRequestCall(modelsAutoMLLookalikeCreateRequest, modelVersion, moduleId, _callback);
        }

        private ModelsAutoMLLookalikeCreateRequest buildBodyParams() {
            ModelsAutoMLLookalikeCreateRequest modelsAutoMLLookalikeCreateRequest = new ModelsAutoMLLookalikeCreateRequest();
            modelsAutoMLLookalikeCreateRequest.engagementType(this.engagementType);
            modelsAutoMLLookalikeCreateRequest.negativeLabelUsers(this.negativeLabelUsers);
            modelsAutoMLLookalikeCreateRequest.positiveLabelUsers(this.positiveLabelUsers);
            modelsAutoMLLookalikeCreateRequest.runDescription(this.runDescription);
            return modelsAutoMLLookalikeCreateRequest;
        }

        /**
         * Execute createLookalikeRequest request
         * @return ModelsAutoMLLookalikeCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ModelsAutoMLLookalikeCreateResponse execute() throws ApiException {
            ModelsAutoMLLookalikeCreateRequest modelsAutoMLLookalikeCreateRequest = buildBodyParams();
            ApiResponse<ModelsAutoMLLookalikeCreateResponse> localVarResp = createLookalikeRequestWithHttpInfo(modelsAutoMLLookalikeCreateRequest, modelVersion, moduleId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createLookalikeRequest request with HTTP info returned
         * @return ApiResponse&lt;ModelsAutoMLLookalikeCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelsAutoMLLookalikeCreateResponse> executeWithHttpInfo() throws ApiException {
            ModelsAutoMLLookalikeCreateRequest modelsAutoMLLookalikeCreateRequest = buildBodyParams();
            return createLookalikeRequestWithHttpInfo(modelsAutoMLLookalikeCreateRequest, modelVersion, moduleId);
        }

        /**
         * Execute createLookalikeRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelsAutoMLLookalikeCreateResponse> _callback) throws ApiException {
            ModelsAutoMLLookalikeCreateRequest modelsAutoMLLookalikeCreateRequest = buildBodyParams();
            return createLookalikeRequestAsync(modelsAutoMLLookalikeCreateRequest, modelVersion, moduleId, _callback);
        }
    }

    /**
     * Create an AutoML lookalike request
     * 
     * @param modelsAutoMLLookalikeCreateRequest Lookalike Request Body (required)
     * @return CreateLookalikeRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public CreateLookalikeRequestRequestBuilder createLookalikeRequest(String engagementType, List<ModelsLookalikeLabel> positiveLabelUsers) throws IllegalArgumentException {
        if (engagementType == null) throw new IllegalArgumentException("\"engagementType\" is required but got null");
            

        if (positiveLabelUsers == null) throw new IllegalArgumentException("\"positiveLabelUsers\" is required but got null");
        return new CreateLookalikeRequestRequestBuilder(engagementType, positiveLabelUsers);
    }
    private okhttp3.Call getAllRunsCall(String moduleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automl/runs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (moduleId != null) {
            localVarHeaderParams.put("module-id", localVarApiClient.parameterToString(moduleId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllRunsValidateBeforeCall(String moduleId, final ApiCallback _callback) throws ApiException {
        return getAllRunsCall(moduleId, _callback);

    }


    private ApiResponse<ModelsAutoMLRunsGetResponse> getAllRunsWithHttpInfo(String moduleId) throws ApiException {
        okhttp3.Call localVarCall = getAllRunsValidateBeforeCall(moduleId, null);
        Type localVarReturnType = new TypeToken<ModelsAutoMLRunsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllRunsAsync(String moduleId, final ApiCallback<ModelsAutoMLRunsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllRunsValidateBeforeCall(moduleId, _callback);
        Type localVarReturnType = new TypeToken<ModelsAutoMLRunsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRunsRequestBuilder {
        private String moduleId;

        private GetAllRunsRequestBuilder() {
        }

        /**
         * Set moduleId
         * @param moduleId Module ID (optional)
         * @return GetAllRunsRequestBuilder
         */
        public GetAllRunsRequestBuilder moduleId(String moduleId) {
            this.moduleId = moduleId;
            return this;
        }
        
        /**
         * Build call for getAllRuns
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllRunsCall(moduleId, _callback);
        }


        /**
         * Execute getAllRuns request
         * @return ModelsAutoMLRunsGetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ModelsAutoMLRunsGetResponse execute() throws ApiException {
            ApiResponse<ModelsAutoMLRunsGetResponse> localVarResp = getAllRunsWithHttpInfo(moduleId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllRuns request with HTTP info returned
         * @return ApiResponse&lt;ModelsAutoMLRunsGetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelsAutoMLRunsGetResponse> executeWithHttpInfo() throws ApiException {
            return getAllRunsWithHttpInfo(moduleId);
        }

        /**
         * Execute getAllRuns request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelsAutoMLRunsGetResponse> _callback) throws ApiException {
            return getAllRunsAsync(moduleId, _callback);
        }
    }

    /**
     * Get all AutoML runs in a specified module
     * 
     * @return GetAllRunsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRunsRequestBuilder getAllRuns() throws IllegalArgumentException {
        return new GetAllRunsRequestBuilder();
    }
    private okhttp3.Call getAvailableUsersCall(String moduleId, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automl/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_number", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (moduleId != null) {
            localVarHeaderParams.put("module-id", localVarApiClient.parameterToString(moduleId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableUsersValidateBeforeCall(String moduleId, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return getAvailableUsersCall(moduleId, pageNumber, pageSize, _callback);

    }


    private ApiResponse<ModelsAutoMLUsersGetResponse> getAvailableUsersWithHttpInfo(String moduleId, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getAvailableUsersValidateBeforeCall(moduleId, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<ModelsAutoMLUsersGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAvailableUsersAsync(String moduleId, Integer pageNumber, Integer pageSize, final ApiCallback<ModelsAutoMLUsersGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableUsersValidateBeforeCall(moduleId, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ModelsAutoMLUsersGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAvailableUsersRequestBuilder {
        private String moduleId;
        private Integer pageNumber;
        private Integer pageSize;

        private GetAvailableUsersRequestBuilder() {
        }

        /**
         * Set moduleId
         * @param moduleId Module ID (optional)
         * @return GetAvailableUsersRequestBuilder
         */
        public GetAvailableUsersRequestBuilder moduleId(String moduleId) {
            this.moduleId = moduleId;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber Page number, starting at 1 (optional, default to 1)
         * @return GetAvailableUsersRequestBuilder
         */
        public GetAvailableUsersRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of users scored in run per page. Between 1 and 10000. Defaults to 500 (optional, default to 500)
         * @return GetAvailableUsersRequestBuilder
         */
        public GetAvailableUsersRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for getAvailableUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAvailableUsersCall(moduleId, pageNumber, pageSize, _callback);
        }


        /**
         * Execute getAvailableUsers request
         * @return ModelsAutoMLUsersGetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ModelsAutoMLUsersGetResponse execute() throws ApiException {
            ApiResponse<ModelsAutoMLUsersGetResponse> localVarResp = getAvailableUsersWithHttpInfo(moduleId, pageNumber, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAvailableUsers request with HTTP info returned
         * @return ApiResponse&lt;ModelsAutoMLUsersGetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelsAutoMLUsersGetResponse> executeWithHttpInfo() throws ApiException {
            return getAvailableUsersWithHttpInfo(moduleId, pageNumber, pageSize);
        }

        /**
         * Execute getAvailableUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelsAutoMLUsersGetResponse> _callback) throws ApiException {
            return getAvailableUsersAsync(moduleId, pageNumber, pageSize, _callback);
        }
    }

    /**
     * Get available users for training an AutoML run in a specified module
     * 
     * @return GetAvailableUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public GetAvailableUsersRequestBuilder getAvailableUsers() throws IllegalArgumentException {
        return new GetAvailableUsersRequestBuilder();
    }
    private okhttp3.Call getRunStatusCall(String runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automl/runs/{run_id}/status"
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRunStatusValidateBeforeCall(String runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling getRunStatus(Async)");
        }

        return getRunStatusCall(runId, _callback);

    }


    private ApiResponse<String> getRunStatusWithHttpInfo(String runId) throws ApiException {
        okhttp3.Call localVarCall = getRunStatusValidateBeforeCall(runId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRunStatusAsync(String runId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRunStatusValidateBeforeCall(runId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRunStatusRequestBuilder {
        private final String runId;

        private GetRunStatusRequestBuilder(String runId) {
            this.runId = runId;
        }

        /**
         * Build call for getRunStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRunStatusCall(runId, _callback);
        }


        /**
         * Execute getRunStatus request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getRunStatusWithHttpInfo(runId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRunStatus request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getRunStatusWithHttpInfo(runId);
        }

        /**
         * Execute getRunStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getRunStatusAsync(runId, _callback);
        }
    }

    /**
     * Get status of a specified AutoML run
     * 
     * @param runId Run ID (required)
     * @return GetRunStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public GetRunStatusRequestBuilder getRunStatus(String runId) throws IllegalArgumentException {
        if (runId == null) throw new IllegalArgumentException("\"runId\" is required but got null");
            

        return new GetRunStatusRequestBuilder(runId);
    }
    private okhttp3.Call getRunStatusBatchScoresCall(String runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automl/runs/{run_id}/status_batch_scores"
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRunStatusBatchScoresValidateBeforeCall(String runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling getRunStatusBatchScores(Async)");
        }

        return getRunStatusBatchScoresCall(runId, _callback);

    }


    private ApiResponse<String> getRunStatusBatchScoresWithHttpInfo(String runId) throws ApiException {
        okhttp3.Call localVarCall = getRunStatusBatchScoresValidateBeforeCall(runId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRunStatusBatchScoresAsync(String runId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRunStatusBatchScoresValidateBeforeCall(runId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRunStatusBatchScoresRequestBuilder {
        private final String runId;

        private GetRunStatusBatchScoresRequestBuilder(String runId) {
            this.runId = runId;
        }

        /**
         * Build call for getRunStatusBatchScores
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRunStatusBatchScoresCall(runId, _callback);
        }


        /**
         * Execute getRunStatusBatchScores request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getRunStatusBatchScoresWithHttpInfo(runId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRunStatusBatchScores request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getRunStatusBatchScoresWithHttpInfo(runId);
        }

        /**
         * Execute getRunStatusBatchScores request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getRunStatusBatchScoresAsync(runId, _callback);
        }
    }

    /**
     * Get status of the batch scores request for an AutoML run
     * 
     * @param runId Run ID (required)
     * @return GetRunStatusBatchScoresRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public GetRunStatusBatchScoresRequestBuilder getRunStatusBatchScores(String runId) throws IllegalArgumentException {
        if (runId == null) throw new IllegalArgumentException("\"runId\" is required but got null");
            

        return new GetRunStatusBatchScoresRequestBuilder(runId);
    }
    private okhttp3.Call getRunSummaryCall(String runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automl/runs/{run_id}"
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRunSummaryValidateBeforeCall(String runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling getRunSummary(Async)");
        }

        return getRunSummaryCall(runId, _callback);

    }


    private ApiResponse<ModelsAutoMLRunGetIdResponse> getRunSummaryWithHttpInfo(String runId) throws ApiException {
        okhttp3.Call localVarCall = getRunSummaryValidateBeforeCall(runId, null);
        Type localVarReturnType = new TypeToken<ModelsAutoMLRunGetIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRunSummaryAsync(String runId, final ApiCallback<ModelsAutoMLRunGetIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRunSummaryValidateBeforeCall(runId, _callback);
        Type localVarReturnType = new TypeToken<ModelsAutoMLRunGetIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRunSummaryRequestBuilder {
        private final String runId;

        private GetRunSummaryRequestBuilder(String runId) {
            this.runId = runId;
        }

        /**
         * Build call for getRunSummary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRunSummaryCall(runId, _callback);
        }


        /**
         * Execute getRunSummary request
         * @return ModelsAutoMLRunGetIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ModelsAutoMLRunGetIdResponse execute() throws ApiException {
            ApiResponse<ModelsAutoMLRunGetIdResponse> localVarResp = getRunSummaryWithHttpInfo(runId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRunSummary request with HTTP info returned
         * @return ApiResponse&lt;ModelsAutoMLRunGetIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelsAutoMLRunGetIdResponse> executeWithHttpInfo() throws ApiException {
            return getRunSummaryWithHttpInfo(runId);
        }

        /**
         * Execute getRunSummary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelsAutoMLRunGetIdResponse> _callback) throws ApiException {
            return getRunSummaryAsync(runId, _callback);
        }
    }

    /**
     * Get run summary for a specified AutoML run
     * 
     * @param runId Run ID (required)
     * @return GetRunSummaryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public GetRunSummaryRequestBuilder getRunSummary(String runId) throws IllegalArgumentException {
        if (runId == null) throw new IllegalArgumentException("\"runId\" is required but got null");
            

        return new GetRunSummaryRequestBuilder(runId);
    }
    private okhttp3.Call getTopUsersExcludingTrainingCall(String runId, ModelsAutoMLRunUsersGetRequest modelsAutoMLRunUsersGetRequest, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelsAutoMLRunUsersGetRequest;

        // create path and map variables
        String localVarPath = "/automl/runs/{run_id}/users"
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_number", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTopUsersExcludingTrainingValidateBeforeCall(String runId, ModelsAutoMLRunUsersGetRequest modelsAutoMLRunUsersGetRequest, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling getTopUsersExcludingTraining(Async)");
        }

        // verify the required parameter 'modelsAutoMLRunUsersGetRequest' is set
        if (modelsAutoMLRunUsersGetRequest == null) {
            throw new ApiException("Missing the required parameter 'modelsAutoMLRunUsersGetRequest' when calling getTopUsersExcludingTraining(Async)");
        }

        return getTopUsersExcludingTrainingCall(runId, modelsAutoMLRunUsersGetRequest, pageNumber, pageSize, _callback);

    }


    private ApiResponse<ModelsAutoMLRunUsersGetResponse> getTopUsersExcludingTrainingWithHttpInfo(String runId, ModelsAutoMLRunUsersGetRequest modelsAutoMLRunUsersGetRequest, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getTopUsersExcludingTrainingValidateBeforeCall(runId, modelsAutoMLRunUsersGetRequest, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<ModelsAutoMLRunUsersGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTopUsersExcludingTrainingAsync(String runId, ModelsAutoMLRunUsersGetRequest modelsAutoMLRunUsersGetRequest, Integer pageNumber, Integer pageSize, final ApiCallback<ModelsAutoMLRunUsersGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTopUsersExcludingTrainingValidateBeforeCall(runId, modelsAutoMLRunUsersGetRequest, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ModelsAutoMLRunUsersGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTopUsersExcludingTrainingRequestBuilder {
        private final String runId;
        private List<ModelsUserMetadata> allowUsers;
        private List<ModelsUserMetadata> blockUsers;
        private List<ModelsTagCategoricalAttributeFilter> tagFilters;
        private Integer pageNumber;
        private Integer pageSize;

        private GetTopUsersExcludingTrainingRequestBuilder(String runId) {
            this.runId = runId;
        }

        /**
         * Set allowUsers
         * @param allowUsers List of users to return user scores for (optional)
         * @return GetTopUsersExcludingTrainingRequestBuilder
         */
        public GetTopUsersExcludingTrainingRequestBuilder allowUsers(List<ModelsUserMetadata> allowUsers) {
            this.allowUsers = allowUsers;
            return this;
        }
        
        /**
         * Set blockUsers
         * @param blockUsers List of users to omit from returned user scores (optional)
         * @return GetTopUsersExcludingTrainingRequestBuilder
         */
        public GetTopUsersExcludingTrainingRequestBuilder blockUsers(List<ModelsUserMetadata> blockUsers) {
            this.blockUsers = blockUsers;
            return this;
        }
        
        /**
         * Set tagFilters
         * @param tagFilters Categorical Filters on pf_type metadata (optional)
         * @return GetTopUsersExcludingTrainingRequestBuilder
         */
        public GetTopUsersExcludingTrainingRequestBuilder tagFilters(List<ModelsTagCategoricalAttributeFilter> tagFilters) {
            this.tagFilters = tagFilters;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber Page number, starting at 1 (optional, default to 1)
         * @return GetTopUsersExcludingTrainingRequestBuilder
         */
        public GetTopUsersExcludingTrainingRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of users scored in run per page. Between 1 and 10000. Defaults to 500 (optional, default to 500)
         * @return GetTopUsersExcludingTrainingRequestBuilder
         */
        public GetTopUsersExcludingTrainingRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for getTopUsersExcludingTraining
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ModelsAutoMLRunUsersGetRequest modelsAutoMLRunUsersGetRequest = buildBodyParams();
            return getTopUsersExcludingTrainingCall(runId, modelsAutoMLRunUsersGetRequest, pageNumber, pageSize, _callback);
        }

        private ModelsAutoMLRunUsersGetRequest buildBodyParams() {
            ModelsAutoMLRunUsersGetRequest modelsAutoMLRunUsersGetRequest = new ModelsAutoMLRunUsersGetRequest();
            modelsAutoMLRunUsersGetRequest.allowUsers(this.allowUsers);
            modelsAutoMLRunUsersGetRequest.blockUsers(this.blockUsers);
            modelsAutoMLRunUsersGetRequest.tagFilters(this.tagFilters);
            return modelsAutoMLRunUsersGetRequest;
        }

        /**
         * Execute getTopUsersExcludingTraining request
         * @return ModelsAutoMLRunUsersGetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ModelsAutoMLRunUsersGetResponse execute() throws ApiException {
            ModelsAutoMLRunUsersGetRequest modelsAutoMLRunUsersGetRequest = buildBodyParams();
            ApiResponse<ModelsAutoMLRunUsersGetResponse> localVarResp = getTopUsersExcludingTrainingWithHttpInfo(runId, modelsAutoMLRunUsersGetRequest, pageNumber, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTopUsersExcludingTraining request with HTTP info returned
         * @return ApiResponse&lt;ModelsAutoMLRunUsersGetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelsAutoMLRunUsersGetResponse> executeWithHttpInfo() throws ApiException {
            ModelsAutoMLRunUsersGetRequest modelsAutoMLRunUsersGetRequest = buildBodyParams();
            return getTopUsersExcludingTrainingWithHttpInfo(runId, modelsAutoMLRunUsersGetRequest, pageNumber, pageSize);
        }

        /**
         * Execute getTopUsersExcludingTraining request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelsAutoMLRunUsersGetResponse> _callback) throws ApiException {
            ModelsAutoMLRunUsersGetRequest modelsAutoMLRunUsersGetRequest = buildBodyParams();
            return getTopUsersExcludingTrainingAsync(runId, modelsAutoMLRunUsersGetRequest, pageNumber, pageSize, _callback);
        }
    }

    /**
     * Get top users from a specified AutoML run excluding training users
     * 
     * @param runId Run ID (required)
     * @param modelsAutoMLRunUsersGetRequest Request Options (required)
     * @return GetTopUsersExcludingTrainingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public GetTopUsersExcludingTrainingRequestBuilder getTopUsersExcludingTraining(String runId) throws IllegalArgumentException {
        if (runId == null) throw new IllegalArgumentException("\"runId\" is required but got null");
            

        return new GetTopUsersExcludingTrainingRequestBuilder(runId);
    }
    private okhttp3.Call rerunInferenceCall(String runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automl/runs/{run_id}/rescore"
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rerunInferenceValidateBeforeCall(String runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling rerunInference(Async)");
        }

        return rerunInferenceCall(runId, _callback);

    }


    private ApiResponse<ModelsAutoMLLookalikeCreateResponse> rerunInferenceWithHttpInfo(String runId) throws ApiException {
        okhttp3.Call localVarCall = rerunInferenceValidateBeforeCall(runId, null);
        Type localVarReturnType = new TypeToken<ModelsAutoMLLookalikeCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call rerunInferenceAsync(String runId, final ApiCallback<ModelsAutoMLLookalikeCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rerunInferenceValidateBeforeCall(runId, _callback);
        Type localVarReturnType = new TypeToken<ModelsAutoMLLookalikeCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RerunInferenceRequestBuilder {
        private final String runId;

        private RerunInferenceRequestBuilder(String runId) {
            this.runId = runId;
        }

        /**
         * Build call for rerunInference
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return rerunInferenceCall(runId, _callback);
        }


        /**
         * Execute rerunInference request
         * @return ModelsAutoMLLookalikeCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ModelsAutoMLLookalikeCreateResponse execute() throws ApiException {
            ApiResponse<ModelsAutoMLLookalikeCreateResponse> localVarResp = rerunInferenceWithHttpInfo(runId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute rerunInference request with HTTP info returned
         * @return ApiResponse&lt;ModelsAutoMLLookalikeCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelsAutoMLLookalikeCreateResponse> executeWithHttpInfo() throws ApiException {
            return rerunInferenceWithHttpInfo(runId);
        }

        /**
         * Execute rerunInference request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelsAutoMLLookalikeCreateResponse> _callback) throws ApiException {
            return rerunInferenceAsync(runId, _callback);
        }
    }

    /**
     * Rerun inference on latest user snapshots to update scores
     * 
     * @param runId Run ID (required)
     * @return RerunInferenceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public RerunInferenceRequestBuilder rerunInference(String runId) throws IllegalArgumentException {
        if (runId == null) throw new IllegalArgumentException("\"runId\" is required but got null");
            

        return new RerunInferenceRequestBuilder(runId);
    }
    private okhttp3.Call rerunInferenceScoresCall(String runId, String moduleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automl/runs/{run_id}/generate_batch_scores"
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (moduleId != null) {
            localVarHeaderParams.put("module-id", localVarApiClient.parameterToString(moduleId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rerunInferenceScoresValidateBeforeCall(String runId, String moduleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling rerunInferenceScores(Async)");
        }

        return rerunInferenceScoresCall(runId, moduleId, _callback);

    }


    private ApiResponse<ModelsAutoMLBatchScoresCreateResponse> rerunInferenceScoresWithHttpInfo(String runId, String moduleId) throws ApiException {
        okhttp3.Call localVarCall = rerunInferenceScoresValidateBeforeCall(runId, moduleId, null);
        Type localVarReturnType = new TypeToken<ModelsAutoMLBatchScoresCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call rerunInferenceScoresAsync(String runId, String moduleId, final ApiCallback<ModelsAutoMLBatchScoresCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rerunInferenceScoresValidateBeforeCall(runId, moduleId, _callback);
        Type localVarReturnType = new TypeToken<ModelsAutoMLBatchScoresCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RerunInferenceScoresRequestBuilder {
        private final String runId;
        private String moduleId;

        private RerunInferenceScoresRequestBuilder(String runId) {
            this.runId = runId;
        }

        /**
         * Set moduleId
         * @param moduleId Module ID (optional)
         * @return RerunInferenceScoresRequestBuilder
         */
        public RerunInferenceScoresRequestBuilder moduleId(String moduleId) {
            this.moduleId = moduleId;
            return this;
        }
        
        /**
         * Build call for rerunInferenceScores
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return rerunInferenceScoresCall(runId, moduleId, _callback);
        }


        /**
         * Execute rerunInferenceScores request
         * @return ModelsAutoMLBatchScoresCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ModelsAutoMLBatchScoresCreateResponse execute() throws ApiException {
            ApiResponse<ModelsAutoMLBatchScoresCreateResponse> localVarResp = rerunInferenceScoresWithHttpInfo(runId, moduleId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute rerunInferenceScores request with HTTP info returned
         * @return ApiResponse&lt;ModelsAutoMLBatchScoresCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelsAutoMLBatchScoresCreateResponse> executeWithHttpInfo() throws ApiException {
            return rerunInferenceScoresWithHttpInfo(runId, moduleId);
        }

        /**
         * Execute rerunInferenceScores request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelsAutoMLBatchScoresCreateResponse> _callback) throws ApiException {
            return rerunInferenceScoresAsync(runId, moduleId, _callback);
        }
    }

    /**
     * Rerun the inference and store the updated scores in the output connection of the module
     * 
     * @param runId Run ID (required)
     * @return RerunInferenceScoresRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public RerunInferenceScoresRequestBuilder rerunInferenceScores(String runId) throws IllegalArgumentException {
        if (runId == null) throw new IllegalArgumentException("\"runId\" is required but got null");
            

        return new RerunInferenceScoresRequestBuilder(runId);
    }
}
