/*
 * Hyperplane API Gateway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ModelsAccountCashflowOverview;
import com.konfigthis.client.model.ModelsTransactionEnrichmentStatisticsResponse;
import com.konfigthis.client.model.ModelsTransactionEnrichmentUsersResponse;
import com.konfigthis.client.model.ModelsUserCashflowHistoryResponse;
import com.konfigthis.client.model.ModelsUserCashflowPerCategoryResponse;
import com.konfigthis.client.model.ModelsUserTransactionsResponse;
import com.konfigthis.client.model.ModelsUserTransactionsStatisticsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EnrichedTransactionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EnrichedTransactionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EnrichedTransactionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getHistoryCall(String userId, String moduleId, Integer pageNumber, Integer pageSize, String startDate, String endDate, String flowType, Double minAmount, Double maxAmount, String accountType, List<String> categories, String searchName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/{user_id}/transactions"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_number", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (flowType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flow_type", flowType));
        }

        if (minAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_amount", minAmount));
        }

        if (maxAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_amount", maxAmount));
        }

        if (accountType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_type", accountType));
        }

        if (categories != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "categories", categories));
        }

        if (searchName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_name", searchName));
        }

        if (moduleId != null) {
            localVarHeaderParams.put("module-id", localVarApiClient.parameterToString(moduleId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHistoryValidateBeforeCall(String userId, String moduleId, Integer pageNumber, Integer pageSize, String startDate, String endDate, String flowType, Double minAmount, Double maxAmount, String accountType, List<String> categories, String searchName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getHistory(Async)");
        }

        // verify the required parameter 'moduleId' is set
        if (moduleId == null) {
            throw new ApiException("Missing the required parameter 'moduleId' when calling getHistory(Async)");
        }

        return getHistoryCall(userId, moduleId, pageNumber, pageSize, startDate, endDate, flowType, minAmount, maxAmount, accountType, categories, searchName, _callback);

    }


    private ApiResponse<ModelsUserTransactionsResponse> getHistoryWithHttpInfo(String userId, String moduleId, Integer pageNumber, Integer pageSize, String startDate, String endDate, String flowType, Double minAmount, Double maxAmount, String accountType, List<String> categories, String searchName) throws ApiException {
        okhttp3.Call localVarCall = getHistoryValidateBeforeCall(userId, moduleId, pageNumber, pageSize, startDate, endDate, flowType, minAmount, maxAmount, accountType, categories, searchName, null);
        Type localVarReturnType = new TypeToken<ModelsUserTransactionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHistoryAsync(String userId, String moduleId, Integer pageNumber, Integer pageSize, String startDate, String endDate, String flowType, Double minAmount, Double maxAmount, String accountType, List<String> categories, String searchName, final ApiCallback<ModelsUserTransactionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHistoryValidateBeforeCall(userId, moduleId, pageNumber, pageSize, startDate, endDate, flowType, minAmount, maxAmount, accountType, categories, searchName, _callback);
        Type localVarReturnType = new TypeToken<ModelsUserTransactionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHistoryRequestBuilder {
        private final String userId;
        private final String moduleId;
        private Integer pageNumber;
        private Integer pageSize;
        private String startDate;
        private String endDate;
        private String flowType;
        private Double minAmount;
        private Double maxAmount;
        private String accountType;
        private List<String> categories;
        private String searchName;

        private GetHistoryRequestBuilder(String userId, String moduleId) {
            this.userId = userId;
            this.moduleId = moduleId;
        }

        /**
         * Set pageNumber
         * @param pageNumber Page number, starting at 1 (optional, default to 1)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of elements per page (optional, default to 100)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Minimum transaction date to be included (e.g. &#39;2020-09-18 10:00:00&#39;). (optional)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Maximum transaction date to be included (e.g. &#39;2020-09-18 10:00:00&#39;). (optional)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set flowType
         * @param flowType The flow type from transactions to be returned, must be either &#39;inflow&#39;, or &#39;outflow&#39;. Defaults to returning both. (optional)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder flowType(String flowType) {
            this.flowType = flowType;
            return this;
        }
        
        /**
         * Set minAmount
         * @param minAmount The minimum amount from transactions to be returned. (optional)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder minAmount(Double minAmount) {
            this.minAmount = minAmount;
            return this;
        }
        
        /**
         * Set maxAmount
         * @param maxAmount The maximum amount from transactions to be returned. (optional)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder maxAmount(Double maxAmount) {
            this.maxAmount = maxAmount;
            return this;
        }
        
        /**
         * Set accountType
         * @param accountType Specifies if we must include only an specific account type. (optional)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder accountType(String accountType) {
            this.accountType = accountType;
            return this;
        }
        
        /**
         * Set categories
         * @param categories List of categories to filter. Accept only category codes present on our taxonomy. (optional)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder categories(List<String> categories) {
            this.categories = categories;
            return this;
        }
        
        /**
         * Set searchName
         * @param searchName Search for a specific string in the transaction description. (optional)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder searchName(String searchName) {
            this.searchName = searchName;
            return this;
        }
        
        /**
         * Build call for getHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHistoryCall(userId, moduleId, pageNumber, pageSize, startDate, endDate, flowType, minAmount, maxAmount, accountType, categories, searchName, _callback);
        }


        /**
         * Execute getHistory request
         * @return ModelsUserTransactionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ModelsUserTransactionsResponse execute() throws ApiException {
            ApiResponse<ModelsUserTransactionsResponse> localVarResp = getHistoryWithHttpInfo(userId, moduleId, pageNumber, pageSize, startDate, endDate, flowType, minAmount, maxAmount, accountType, categories, searchName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHistory request with HTTP info returned
         * @return ApiResponse&lt;ModelsUserTransactionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelsUserTransactionsResponse> executeWithHttpInfo() throws ApiException {
            return getHistoryWithHttpInfo(userId, moduleId, pageNumber, pageSize, startDate, endDate, flowType, minAmount, maxAmount, accountType, categories, searchName);
        }

        /**
         * Execute getHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelsUserTransactionsResponse> _callback) throws ApiException {
            return getHistoryAsync(userId, moduleId, pageNumber, pageSize, startDate, endDate, flowType, minAmount, maxAmount, accountType, categories, searchName, _callback);
        }
    }

    /**
     * Get the transaction history for a given user.
     * Returns the enriched transaction history of a user
     * @param userId User ID (required)
     * @param moduleId Module ID (required)
     * @return GetHistoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetHistoryRequestBuilder getHistory(String userId, String moduleId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (moduleId == null) throw new IllegalArgumentException("\"moduleId\" is required but got null");
            

        return new GetHistoryRequestBuilder(userId, moduleId);
    }
    private okhttp3.Call getStatisticsCall(String moduleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/module/transaction-enrichment/statistics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (moduleId != null) {
            localVarHeaderParams.put("module-id", localVarApiClient.parameterToString(moduleId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatisticsValidateBeforeCall(String moduleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'moduleId' is set
        if (moduleId == null) {
            throw new ApiException("Missing the required parameter 'moduleId' when calling getStatistics(Async)");
        }

        return getStatisticsCall(moduleId, _callback);

    }


    private ApiResponse<ModelsTransactionEnrichmentStatisticsResponse> getStatisticsWithHttpInfo(String moduleId) throws ApiException {
        okhttp3.Call localVarCall = getStatisticsValidateBeforeCall(moduleId, null);
        Type localVarReturnType = new TypeToken<ModelsTransactionEnrichmentStatisticsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStatisticsAsync(String moduleId, final ApiCallback<ModelsTransactionEnrichmentStatisticsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatisticsValidateBeforeCall(moduleId, _callback);
        Type localVarReturnType = new TypeToken<ModelsTransactionEnrichmentStatisticsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStatisticsRequestBuilder {
        private final String moduleId;

        private GetStatisticsRequestBuilder(String moduleId) {
            this.moduleId = moduleId;
        }

        /**
         * Build call for getStatistics
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStatisticsCall(moduleId, _callback);
        }


        /**
         * Execute getStatistics request
         * @return ModelsTransactionEnrichmentStatisticsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ModelsTransactionEnrichmentStatisticsResponse execute() throws ApiException {
            ApiResponse<ModelsTransactionEnrichmentStatisticsResponse> localVarResp = getStatisticsWithHttpInfo(moduleId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStatistics request with HTTP info returned
         * @return ApiResponse&lt;ModelsTransactionEnrichmentStatisticsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelsTransactionEnrichmentStatisticsResponse> executeWithHttpInfo() throws ApiException {
            return getStatisticsWithHttpInfo(moduleId);
        }

        /**
         * Execute getStatistics request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelsTransactionEnrichmentStatisticsResponse> _callback) throws ApiException {
            return getStatisticsAsync(moduleId, _callback);
        }
    }

    /**
     * Get statistics for transaction enrichment module.
     * Retrieves statistics about a transaction enrichment module. The payload includes the number of distinct users and number of transactions.
     * @param moduleId Module ID (required)
     * @return GetStatisticsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetStatisticsRequestBuilder getStatistics(String moduleId) throws IllegalArgumentException {
        if (moduleId == null) throw new IllegalArgumentException("\"moduleId\" is required but got null");
            

        return new GetStatisticsRequestBuilder(moduleId);
    }
    private okhttp3.Call getUserCashflowCategoriesCall(String userId, String moduleId, String startDate, String endDate, String accountType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/{user_id}/cashflow/categories"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (accountType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_type", accountType));
        }

        if (moduleId != null) {
            localVarHeaderParams.put("module-id", localVarApiClient.parameterToString(moduleId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserCashflowCategoriesValidateBeforeCall(String userId, String moduleId, String startDate, String endDate, String accountType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserCashflowCategories(Async)");
        }

        // verify the required parameter 'moduleId' is set
        if (moduleId == null) {
            throw new ApiException("Missing the required parameter 'moduleId' when calling getUserCashflowCategories(Async)");
        }

        return getUserCashflowCategoriesCall(userId, moduleId, startDate, endDate, accountType, _callback);

    }


    private ApiResponse<ModelsUserCashflowPerCategoryResponse> getUserCashflowCategoriesWithHttpInfo(String userId, String moduleId, String startDate, String endDate, String accountType) throws ApiException {
        okhttp3.Call localVarCall = getUserCashflowCategoriesValidateBeforeCall(userId, moduleId, startDate, endDate, accountType, null);
        Type localVarReturnType = new TypeToken<ModelsUserCashflowPerCategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserCashflowCategoriesAsync(String userId, String moduleId, String startDate, String endDate, String accountType, final ApiCallback<ModelsUserCashflowPerCategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserCashflowCategoriesValidateBeforeCall(userId, moduleId, startDate, endDate, accountType, _callback);
        Type localVarReturnType = new TypeToken<ModelsUserCashflowPerCategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserCashflowCategoriesRequestBuilder {
        private final String userId;
        private final String moduleId;
        private String startDate;
        private String endDate;
        private String accountType;

        private GetUserCashflowCategoriesRequestBuilder(String userId, String moduleId) {
            this.userId = userId;
            this.moduleId = moduleId;
        }

        /**
         * Set startDate
         * @param startDate Minimum transaction date to be included (e.g. &#39;2020-09-18 10:00:00&#39;). (optional)
         * @return GetUserCashflowCategoriesRequestBuilder
         */
        public GetUserCashflowCategoriesRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Maximum transaction date to be included (e.g. &#39;2020-09-18 10:00:00&#39;). (optional)
         * @return GetUserCashflowCategoriesRequestBuilder
         */
        public GetUserCashflowCategoriesRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set accountType
         * @param accountType Specifies if we must include only an specific account type. Can be &#39;CREDIT_CARD&#39;, &#39;DEBIT_CARD&#39;, &#39;SAVINGS&#39;, &#39;CHECKING&#39;, &#39;INVESTMENT&#39;, &#39;PENSION&#39;, or &#39;LOAN&#39;. (optional)
         * @return GetUserCashflowCategoriesRequestBuilder
         */
        public GetUserCashflowCategoriesRequestBuilder accountType(String accountType) {
            this.accountType = accountType;
            return this;
        }
        
        /**
         * Build call for getUserCashflowCategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserCashflowCategoriesCall(userId, moduleId, startDate, endDate, accountType, _callback);
        }


        /**
         * Execute getUserCashflowCategories request
         * @return ModelsUserCashflowPerCategoryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ModelsUserCashflowPerCategoryResponse execute() throws ApiException {
            ApiResponse<ModelsUserCashflowPerCategoryResponse> localVarResp = getUserCashflowCategoriesWithHttpInfo(userId, moduleId, startDate, endDate, accountType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserCashflowCategories request with HTTP info returned
         * @return ApiResponse&lt;ModelsUserCashflowPerCategoryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelsUserCashflowPerCategoryResponse> executeWithHttpInfo() throws ApiException {
            return getUserCashflowCategoriesWithHttpInfo(userId, moduleId, startDate, endDate, accountType);
        }

        /**
         * Execute getUserCashflowCategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelsUserCashflowPerCategoryResponse> _callback) throws ApiException {
            return getUserCashflowCategoriesAsync(userId, moduleId, startDate, endDate, accountType, _callback);
        }
    }

    /**
     * Get a user&#39;s cashflow aggregated per category.
     * Detailed percentages of inflow and outflow for each category. Lists all the top level categories and the discrimination under each top level category
     * @param userId User ID (required)
     * @param moduleId Module ID (required)
     * @return GetUserCashflowCategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetUserCashflowCategoriesRequestBuilder getUserCashflowCategories(String userId, String moduleId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (moduleId == null) throw new IllegalArgumentException("\"moduleId\" is required but got null");
            

        return new GetUserCashflowCategoriesRequestBuilder(userId, moduleId);
    }
    private okhttp3.Call getUserCashflowHistoryCall(String userId, String moduleId, String startDate, String endDate, String aggregation, String accountType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/{user_id}/cashflow/history"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (aggregation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggregation", aggregation));
        }

        if (accountType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_type", accountType));
        }

        if (moduleId != null) {
            localVarHeaderParams.put("module-id", localVarApiClient.parameterToString(moduleId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserCashflowHistoryValidateBeforeCall(String userId, String moduleId, String startDate, String endDate, String aggregation, String accountType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserCashflowHistory(Async)");
        }

        // verify the required parameter 'moduleId' is set
        if (moduleId == null) {
            throw new ApiException("Missing the required parameter 'moduleId' when calling getUserCashflowHistory(Async)");
        }

        return getUserCashflowHistoryCall(userId, moduleId, startDate, endDate, aggregation, accountType, _callback);

    }


    private ApiResponse<ModelsUserCashflowHistoryResponse> getUserCashflowHistoryWithHttpInfo(String userId, String moduleId, String startDate, String endDate, String aggregation, String accountType) throws ApiException {
        okhttp3.Call localVarCall = getUserCashflowHistoryValidateBeforeCall(userId, moduleId, startDate, endDate, aggregation, accountType, null);
        Type localVarReturnType = new TypeToken<ModelsUserCashflowHistoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserCashflowHistoryAsync(String userId, String moduleId, String startDate, String endDate, String aggregation, String accountType, final ApiCallback<ModelsUserCashflowHistoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserCashflowHistoryValidateBeforeCall(userId, moduleId, startDate, endDate, aggregation, accountType, _callback);
        Type localVarReturnType = new TypeToken<ModelsUserCashflowHistoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserCashflowHistoryRequestBuilder {
        private final String userId;
        private final String moduleId;
        private String startDate;
        private String endDate;
        private String aggregation;
        private String accountType;

        private GetUserCashflowHistoryRequestBuilder(String userId, String moduleId) {
            this.userId = userId;
            this.moduleId = moduleId;
        }

        /**
         * Set startDate
         * @param startDate Minimum transaction date to be included (e.g. &#39;2020-09-18 10:00:00&#39;). (optional)
         * @return GetUserCashflowHistoryRequestBuilder
         */
        public GetUserCashflowHistoryRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Maximum transaction date to be included (e.g. &#39;2020-09-18 10:00:00&#39;). (optional)
         * @return GetUserCashflowHistoryRequestBuilder
         */
        public GetUserCashflowHistoryRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set aggregation
         * @param aggregation How to aggregate the cashflows in periods. Can be &#39;HOUR&#39;, &#39;DAY&#39;, &#39;WEEK&#39;, &#39;MONTH&#39;, or &#39;YEAR&#39;. (optional)
         * @return GetUserCashflowHistoryRequestBuilder
         */
        public GetUserCashflowHistoryRequestBuilder aggregation(String aggregation) {
            this.aggregation = aggregation;
            return this;
        }
        
        /**
         * Set accountType
         * @param accountType Specifies if we must include only an specific account type. Can be &#39;CREDIT_CARD&#39;, &#39;DEBIT_CARD&#39;, &#39;SAVINGS&#39;, &#39;CHECKING&#39;, &#39;INVESTMENT&#39;, &#39;PENSION&#39;, or &#39;LOAN&#39;. (optional)
         * @return GetUserCashflowHistoryRequestBuilder
         */
        public GetUserCashflowHistoryRequestBuilder accountType(String accountType) {
            this.accountType = accountType;
            return this;
        }
        
        /**
         * Build call for getUserCashflowHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserCashflowHistoryCall(userId, moduleId, startDate, endDate, aggregation, accountType, _callback);
        }


        /**
         * Execute getUserCashflowHistory request
         * @return ModelsUserCashflowHistoryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ModelsUserCashflowHistoryResponse execute() throws ApiException {
            ApiResponse<ModelsUserCashflowHistoryResponse> localVarResp = getUserCashflowHistoryWithHttpInfo(userId, moduleId, startDate, endDate, aggregation, accountType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserCashflowHistory request with HTTP info returned
         * @return ApiResponse&lt;ModelsUserCashflowHistoryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelsUserCashflowHistoryResponse> executeWithHttpInfo() throws ApiException {
            return getUserCashflowHistoryWithHttpInfo(userId, moduleId, startDate, endDate, aggregation, accountType);
        }

        /**
         * Execute getUserCashflowHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelsUserCashflowHistoryResponse> _callback) throws ApiException {
            return getUserCashflowHistoryAsync(userId, moduleId, startDate, endDate, aggregation, accountType, _callback);
        }
    }

    /**
     * Get the cashflow history for a given user.
     * Creates a cashflow timeline for a given user, aggregating all transactions in a given window. The period windows can be of 1 hour, day, week, month or year.
     * @param userId User ID (required)
     * @param moduleId Module ID (required)
     * @return GetUserCashflowHistoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetUserCashflowHistoryRequestBuilder getUserCashflowHistory(String userId, String moduleId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (moduleId == null) throw new IllegalArgumentException("\"moduleId\" is required but got null");
            

        return new GetUserCashflowHistoryRequestBuilder(userId, moduleId);
    }
    private okhttp3.Call getUserCashflowStatisticsCall(String userId, String moduleId, String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/{user_id}/cashflow/statistics"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (moduleId != null) {
            localVarHeaderParams.put("module-id", localVarApiClient.parameterToString(moduleId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserCashflowStatisticsValidateBeforeCall(String userId, String moduleId, String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserCashflowStatistics(Async)");
        }

        // verify the required parameter 'moduleId' is set
        if (moduleId == null) {
            throw new ApiException("Missing the required parameter 'moduleId' when calling getUserCashflowStatistics(Async)");
        }

        return getUserCashflowStatisticsCall(userId, moduleId, startDate, endDate, _callback);

    }


    private ApiResponse<List<ModelsAccountCashflowOverview>> getUserCashflowStatisticsWithHttpInfo(String userId, String moduleId, String startDate, String endDate) throws ApiException {
        okhttp3.Call localVarCall = getUserCashflowStatisticsValidateBeforeCall(userId, moduleId, startDate, endDate, null);
        Type localVarReturnType = new TypeToken<List<ModelsAccountCashflowOverview>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserCashflowStatisticsAsync(String userId, String moduleId, String startDate, String endDate, final ApiCallback<List<ModelsAccountCashflowOverview>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserCashflowStatisticsValidateBeforeCall(userId, moduleId, startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<List<ModelsAccountCashflowOverview>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserCashflowStatisticsRequestBuilder {
        private final String userId;
        private final String moduleId;
        private String startDate;
        private String endDate;

        private GetUserCashflowStatisticsRequestBuilder(String userId, String moduleId) {
            this.userId = userId;
            this.moduleId = moduleId;
        }

        /**
         * Set startDate
         * @param startDate Minimum transaction date to be included (e.g. &#39;2020-09-18 10:00:00&#39;). (optional)
         * @return GetUserCashflowStatisticsRequestBuilder
         */
        public GetUserCashflowStatisticsRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Maximum transaction date to be included (e.g. &#39;2020-09-18 10:00:00&#39;). (optional)
         * @return GetUserCashflowStatisticsRequestBuilder
         */
        public GetUserCashflowStatisticsRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Build call for getUserCashflowStatistics
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserCashflowStatisticsCall(userId, moduleId, startDate, endDate, _callback);
        }


        /**
         * Execute getUserCashflowStatistics request
         * @return List&lt;ModelsAccountCashflowOverview&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public List<ModelsAccountCashflowOverview> execute() throws ApiException {
            ApiResponse<List<ModelsAccountCashflowOverview>> localVarResp = getUserCashflowStatisticsWithHttpInfo(userId, moduleId, startDate, endDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserCashflowStatistics request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ModelsAccountCashflowOverview&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ModelsAccountCashflowOverview>> executeWithHttpInfo() throws ApiException {
            return getUserCashflowStatisticsWithHttpInfo(userId, moduleId, startDate, endDate);
        }

        /**
         * Execute getUserCashflowStatistics request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ModelsAccountCashflowOverview>> _callback) throws ApiException {
            return getUserCashflowStatisticsAsync(userId, moduleId, startDate, endDate, _callback);
        }
    }

    /**
     * Get the cashflow statistics for a given user.
     * Get the cashflow statistics for a given user per account type. That includes inflow, outflow, and net cashflow for each account type.
     * @param userId User ID (required)
     * @param moduleId Module ID (required)
     * @return GetUserCashflowStatisticsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetUserCashflowStatisticsRequestBuilder getUserCashflowStatistics(String userId, String moduleId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (moduleId == null) throw new IllegalArgumentException("\"moduleId\" is required but got null");
            

        return new GetUserCashflowStatisticsRequestBuilder(userId, moduleId);
    }
    private okhttp3.Call getUserStatisticsCall(String userId, String moduleId, String startDate, String endDate, String flowType, Double minAmount, Double maxAmount, String accountType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/{user_id}/transactions/statistics"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (flowType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flow_type", flowType));
        }

        if (minAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_amount", minAmount));
        }

        if (maxAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_amount", maxAmount));
        }

        if (accountType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_type", accountType));
        }

        if (moduleId != null) {
            localVarHeaderParams.put("module-id", localVarApiClient.parameterToString(moduleId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserStatisticsValidateBeforeCall(String userId, String moduleId, String startDate, String endDate, String flowType, Double minAmount, Double maxAmount, String accountType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserStatistics(Async)");
        }

        // verify the required parameter 'moduleId' is set
        if (moduleId == null) {
            throw new ApiException("Missing the required parameter 'moduleId' when calling getUserStatistics(Async)");
        }

        return getUserStatisticsCall(userId, moduleId, startDate, endDate, flowType, minAmount, maxAmount, accountType, _callback);

    }


    private ApiResponse<ModelsUserTransactionsStatisticsResponse> getUserStatisticsWithHttpInfo(String userId, String moduleId, String startDate, String endDate, String flowType, Double minAmount, Double maxAmount, String accountType) throws ApiException {
        okhttp3.Call localVarCall = getUserStatisticsValidateBeforeCall(userId, moduleId, startDate, endDate, flowType, minAmount, maxAmount, accountType, null);
        Type localVarReturnType = new TypeToken<ModelsUserTransactionsStatisticsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserStatisticsAsync(String userId, String moduleId, String startDate, String endDate, String flowType, Double minAmount, Double maxAmount, String accountType, final ApiCallback<ModelsUserTransactionsStatisticsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserStatisticsValidateBeforeCall(userId, moduleId, startDate, endDate, flowType, minAmount, maxAmount, accountType, _callback);
        Type localVarReturnType = new TypeToken<ModelsUserTransactionsStatisticsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserStatisticsRequestBuilder {
        private final String userId;
        private final String moduleId;
        private String startDate;
        private String endDate;
        private String flowType;
        private Double minAmount;
        private Double maxAmount;
        private String accountType;

        private GetUserStatisticsRequestBuilder(String userId, String moduleId) {
            this.userId = userId;
            this.moduleId = moduleId;
        }

        /**
         * Set startDate
         * @param startDate Minimum transaction date to be included (e.g. &#39;2020-09-18 10:00:00&#39;). (optional)
         * @return GetUserStatisticsRequestBuilder
         */
        public GetUserStatisticsRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Maximum transaction date to be included (e.g. &#39;2020-09-18 10:00:00&#39;). (optional)
         * @return GetUserStatisticsRequestBuilder
         */
        public GetUserStatisticsRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set flowType
         * @param flowType The flow type from transactions to be returned, must be either &#39;inflow&#39;, or &#39;outflow&#39;. Defaults to returning both. (optional)
         * @return GetUserStatisticsRequestBuilder
         */
        public GetUserStatisticsRequestBuilder flowType(String flowType) {
            this.flowType = flowType;
            return this;
        }
        
        /**
         * Set minAmount
         * @param minAmount The minimum amount from transactions to be returned. (optional)
         * @return GetUserStatisticsRequestBuilder
         */
        public GetUserStatisticsRequestBuilder minAmount(Double minAmount) {
            this.minAmount = minAmount;
            return this;
        }
        
        /**
         * Set maxAmount
         * @param maxAmount The maximum amount from transactions to be returned. (optional)
         * @return GetUserStatisticsRequestBuilder
         */
        public GetUserStatisticsRequestBuilder maxAmount(Double maxAmount) {
            this.maxAmount = maxAmount;
            return this;
        }
        
        /**
         * Set accountType
         * @param accountType Specifies if we must include only an specific account type. (optional)
         * @return GetUserStatisticsRequestBuilder
         */
        public GetUserStatisticsRequestBuilder accountType(String accountType) {
            this.accountType = accountType;
            return this;
        }
        
        /**
         * Build call for getUserStatistics
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserStatisticsCall(userId, moduleId, startDate, endDate, flowType, minAmount, maxAmount, accountType, _callback);
        }


        /**
         * Execute getUserStatistics request
         * @return ModelsUserTransactionsStatisticsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ModelsUserTransactionsStatisticsResponse execute() throws ApiException {
            ApiResponse<ModelsUserTransactionsStatisticsResponse> localVarResp = getUserStatisticsWithHttpInfo(userId, moduleId, startDate, endDate, flowType, minAmount, maxAmount, accountType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserStatistics request with HTTP info returned
         * @return ApiResponse&lt;ModelsUserTransactionsStatisticsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelsUserTransactionsStatisticsResponse> executeWithHttpInfo() throws ApiException {
            return getUserStatisticsWithHttpInfo(userId, moduleId, startDate, endDate, flowType, minAmount, maxAmount, accountType);
        }

        /**
         * Execute getUserStatistics request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelsUserTransactionsStatisticsResponse> _callback) throws ApiException {
            return getUserStatisticsAsync(userId, moduleId, startDate, endDate, flowType, minAmount, maxAmount, accountType, _callback);
        }
    }

    /**
     * Get the transaction statistics for a given user.
     * Get the number of transactions, average transaction value and median.
     * @param userId User ID (required)
     * @param moduleId Module ID (required)
     * @return GetUserStatisticsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetUserStatisticsRequestBuilder getUserStatistics(String userId, String moduleId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (moduleId == null) throw new IllegalArgumentException("\"moduleId\" is required but got null");
            

        return new GetUserStatisticsRequestBuilder(userId, moduleId);
    }
    private okhttp3.Call listUsersCall(String moduleId, String userIdPrefix, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/module/transaction-enrichment/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userIdPrefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id_prefix", userIdPrefix));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_number", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (moduleId != null) {
            localVarHeaderParams.put("module-id", localVarApiClient.parameterToString(moduleId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUsersValidateBeforeCall(String moduleId, String userIdPrefix, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'moduleId' is set
        if (moduleId == null) {
            throw new ApiException("Missing the required parameter 'moduleId' when calling listUsers(Async)");
        }

        return listUsersCall(moduleId, userIdPrefix, pageNumber, pageSize, _callback);

    }


    private ApiResponse<ModelsTransactionEnrichmentUsersResponse> listUsersWithHttpInfo(String moduleId, String userIdPrefix, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listUsersValidateBeforeCall(moduleId, userIdPrefix, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<ModelsTransactionEnrichmentUsersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUsersAsync(String moduleId, String userIdPrefix, Integer pageNumber, Integer pageSize, final ApiCallback<ModelsTransactionEnrichmentUsersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUsersValidateBeforeCall(moduleId, userIdPrefix, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ModelsTransactionEnrichmentUsersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUsersRequestBuilder {
        private final String moduleId;
        private String userIdPrefix;
        private Integer pageNumber;
        private Integer pageSize;

        private ListUsersRequestBuilder(String moduleId) {
            this.moduleId = moduleId;
        }

        /**
         * Set userIdPrefix
         * @param userIdPrefix Prefix used to filter user_id results (e.g.: prefix &#x3D; &#39;2&#39;-&gt; users &#x3D; [&#39;23456&#39;, &#39;24562&#39;]). (optional)
         * @return ListUsersRequestBuilder
         */
        public ListUsersRequestBuilder userIdPrefix(String userIdPrefix) {
            this.userIdPrefix = userIdPrefix;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber Page number, starting at 1 (optional, default to 1)
         * @return ListUsersRequestBuilder
         */
        public ListUsersRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of elements per page. Defaults to 100 (optional, default to 100)
         * @return ListUsersRequestBuilder
         */
        public ListUsersRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUsersCall(moduleId, userIdPrefix, pageNumber, pageSize, _callback);
        }


        /**
         * Execute listUsers request
         * @return ModelsTransactionEnrichmentUsersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ModelsTransactionEnrichmentUsersResponse execute() throws ApiException {
            ApiResponse<ModelsTransactionEnrichmentUsersResponse> localVarResp = listUsersWithHttpInfo(moduleId, userIdPrefix, pageNumber, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUsers request with HTTP info returned
         * @return ApiResponse&lt;ModelsTransactionEnrichmentUsersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelsTransactionEnrichmentUsersResponse> executeWithHttpInfo() throws ApiException {
            return listUsersWithHttpInfo(moduleId, userIdPrefix, pageNumber, pageSize);
        }

        /**
         * Execute listUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelsTransactionEnrichmentUsersResponse> _callback) throws ApiException {
            return listUsersAsync(moduleId, userIdPrefix, pageNumber, pageSize, _callback);
        }
    }

    /**
     * List the users in a transaction enrichment module.
     * List the users in a transaction enrichment module. Optionally, you can pass a &#x60;user_id_prefix&#x60; as a query parameter to filter users by a user ID prefix. Every user will contain their user ID, as well as their first and last transaction dates.
     * @param moduleId Module ID (required)
     * @return ListUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListUsersRequestBuilder listUsers(String moduleId) throws IllegalArgumentException {
        if (moduleId == null) throw new IllegalArgumentException("\"moduleId\" is required but got null");
            

        return new ListUsersRequestBuilder(moduleId);
    }
}
