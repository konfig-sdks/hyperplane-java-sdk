/*
 * Hyperplane API Gateway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ModelsBatchUserPersonasRequest;
import com.konfigthis.client.model.ModelsCategoricalAttributeFilter;
import com.konfigthis.client.model.ModelsFacetWeightObject;
import com.konfigthis.client.model.ModelsListPersonasResponse;
import com.konfigthis.client.model.ModelsNumericalAttributeFilter;
import com.konfigthis.client.model.ModelsPercentileScore;
import com.konfigthis.client.model.ModelsPersonaCreateRequest;
import com.konfigthis.client.model.ModelsPersonaCreateResponse;
import com.konfigthis.client.model.ModelsPersonaDetailsResponse;
import com.konfigthis.client.model.ModelsPersonaUsersResponse;
import com.konfigthis.client.model.ModelsPostPersonaUsersRequest;
import com.konfigthis.client.model.ModelsTimestampAttributeFilter;
import com.konfigthis.client.model.ModelsUserPersonasResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PersonasApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PersonasApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PersonasApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createDefinitionCall(ModelsPersonaCreateRequest modelsPersonaCreateRequest, String modelVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelsPersonaCreateRequest;

        // create path and map variables
        String localVarPath = "/persona";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modelVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model_version", modelVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDefinitionValidateBeforeCall(ModelsPersonaCreateRequest modelsPersonaCreateRequest, String modelVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelsPersonaCreateRequest' is set
        if (modelsPersonaCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'modelsPersonaCreateRequest' when calling createDefinition(Async)");
        }

        return createDefinitionCall(modelsPersonaCreateRequest, modelVersion, _callback);

    }


    private ApiResponse<ModelsPersonaCreateResponse> createDefinitionWithHttpInfo(ModelsPersonaCreateRequest modelsPersonaCreateRequest, String modelVersion) throws ApiException {
        okhttp3.Call localVarCall = createDefinitionValidateBeforeCall(modelsPersonaCreateRequest, modelVersion, null);
        Type localVarReturnType = new TypeToken<ModelsPersonaCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDefinitionAsync(ModelsPersonaCreateRequest modelsPersonaCreateRequest, String modelVersion, final ApiCallback<ModelsPersonaCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDefinitionValidateBeforeCall(modelsPersonaCreateRequest, modelVersion, _callback);
        Type localVarReturnType = new TypeToken<ModelsPersonaCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateDefinitionRequestBuilder {
        private final String personaName;
        private List<ModelsFacetWeightObject> companyFacets;
        private List<ModelsFacetWeightObject> demographicFacets;
        private List<ModelsFacetWeightObject> interestFacets;
        private List<String> locations;
        private List<ModelsFacetWeightObject> preDefinedPersonas;
        private String modelVersion;

        private CreateDefinitionRequestBuilder(String personaName) {
            this.personaName = personaName;
        }

        /**
         * Set companyFacets
         * @param companyFacets Optional list of behavioral facet component objects. Each object outlines how a user&#39;s likelihood to consume from a particular company&#39;s products and how much it contributes to the persona definition. If left empty, no company-based scoring is done. Company facets can be found by listing personas of facet type &#39;company&#39;. Facet name must be a valid company facet in the persona taxonomy. (optional)
         * @return CreateDefinitionRequestBuilder
         */
        public CreateDefinitionRequestBuilder companyFacets(List<ModelsFacetWeightObject> companyFacets) {
            this.companyFacets = companyFacets;
            return this;
        }
        
        /**
         * Set demographicFacets
         * @param demographicFacets Optional list of interest facet component objects. Defines how much each demographic attribute (location, affluence, household composition, etc.)  weighs in the persona. If left empty, no demographic-based scoring is done. Demographic facets can be found by listing personas of facet type &#39;demographic&#39;. Facet name must be a valid demographic facet in the persona taxonomy. (optional)
         * @return CreateDefinitionRequestBuilder
         */
        public CreateDefinitionRequestBuilder demographicFacets(List<ModelsFacetWeightObject> demographicFacets) {
            this.demographicFacets = demographicFacets;
            return this;
        }
        
        /**
         * Set interestFacets
         * @param interestFacets Optional list of interest facet component objects. Each object represents how much an interest weighs in the persona. If left empty, no interest-based scoring is done. Interests can be found by listing personas of facet type &#39;interest&#39;. Facet name must be a valid interest in the persona taxonomy. (optional)
         * @return CreateDefinitionRequestBuilder
         */
        public CreateDefinitionRequestBuilder interestFacets(List<ModelsFacetWeightObject> interestFacets) {
            this.interestFacets = interestFacets;
            return this;
        }
        
        /**
         * Set locations
         * @param locations Optional list of zip codes or city ids to filter users by. If left empty, no location-based filtering is done. (optional)
         * @return CreateDefinitionRequestBuilder
         */
        public CreateDefinitionRequestBuilder locations(List<String> locations) {
            this.locations = locations;
            return this;
        }
        
        /**
         * Set preDefinedPersonas
         * @param preDefinedPersonas Optional list of pre-defined persona facet component objects. Each object outlines how a pre-defined persona (&#39;Car Owners&#39; or &#39;International Travelers&#39;) contributes to the persona definition. If left empty, no predefined personas are incorporated into the persona definition. Pre-defined personas have been optimized for financial use cases and have been validated at scale. They can be found by listing personas of facet type &#39;pre_defined_persona&#39;. Facet name must be a valid pre-defined persona facet in the persona taxonomy. (optional)
         * @return CreateDefinitionRequestBuilder
         */
        public CreateDefinitionRequestBuilder preDefinedPersonas(List<ModelsFacetWeightObject> preDefinedPersonas) {
            this.preDefinedPersonas = preDefinedPersonas;
            return this;
        }
        
        /**
         * Set modelVersion
         * @param modelVersion Model Version (optional, default to \&quot;latest\&quot;)
         * @return CreateDefinitionRequestBuilder
         */
        public CreateDefinitionRequestBuilder modelVersion(String modelVersion) {
            this.modelVersion = modelVersion;
            return this;
        }
        
        /**
         * Build call for createDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ModelsPersonaCreateRequest modelsPersonaCreateRequest = buildBodyParams();
            return createDefinitionCall(modelsPersonaCreateRequest, modelVersion, _callback);
        }

        private ModelsPersonaCreateRequest buildBodyParams() {
            ModelsPersonaCreateRequest modelsPersonaCreateRequest = new ModelsPersonaCreateRequest();
            modelsPersonaCreateRequest.companyFacets(this.companyFacets);
            modelsPersonaCreateRequest.demographicFacets(this.demographicFacets);
            modelsPersonaCreateRequest.interestFacets(this.interestFacets);
            modelsPersonaCreateRequest.locations(this.locations);
            modelsPersonaCreateRequest.personaName(this.personaName);
            modelsPersonaCreateRequest.preDefinedPersonas(this.preDefinedPersonas);
            return modelsPersonaCreateRequest;
        }

        /**
         * Execute createDefinition request
         * @return ModelsPersonaCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ModelsPersonaCreateResponse execute() throws ApiException {
            ModelsPersonaCreateRequest modelsPersonaCreateRequest = buildBodyParams();
            ApiResponse<ModelsPersonaCreateResponse> localVarResp = createDefinitionWithHttpInfo(modelsPersonaCreateRequest, modelVersion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createDefinition request with HTTP info returned
         * @return ApiResponse&lt;ModelsPersonaCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelsPersonaCreateResponse> executeWithHttpInfo() throws ApiException {
            ModelsPersonaCreateRequest modelsPersonaCreateRequest = buildBodyParams();
            return createDefinitionWithHttpInfo(modelsPersonaCreateRequest, modelVersion);
        }

        /**
         * Execute createDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelsPersonaCreateResponse> _callback) throws ApiException {
            ModelsPersonaCreateRequest modelsPersonaCreateRequest = buildBodyParams();
            return createDefinitionAsync(modelsPersonaCreateRequest, modelVersion, _callback);
        }
    }

    /**
     * Create a persona definition.
     * Creates a persona definition from a list of facet weights.  Personas enable you to define a weighted combination of interests, demographics, and financial behaviors to create highly targeted audiences for specialized use cases. They are defined using a list of facet weights, each containing a facet name and a weight. To create a persona, you must provide at least one facet weight. Each facet weight must contain a valid facet name and must be registered in the field with corresponding facet type. For example, if you want to create a persona with a facet weight for the \&quot;Travel\&quot; interest facet, you must provide a facet weight with the name \&quot;Travel\&quot; with the facet type \&quot;interest\&quot;, the facet weight must be defined in the &#x60;interest_facets&#x60; field.
     * @param modelsPersonaCreateRequest Persona Request Body (required)
     * @return CreateDefinitionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateDefinitionRequestBuilder createDefinition(String personaName) throws IllegalArgumentException {
        if (personaName == null) throw new IllegalArgumentException("\"personaName\" is required but got null");
            

        return new CreateDefinitionRequestBuilder(personaName);
    }
    private okhttp3.Call deleteDefinitionCall(String personaId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persona/{persona_id}"
            .replace("{" + "persona_id" + "}", localVarApiClient.escapeString(personaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDefinitionValidateBeforeCall(String personaId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personaId' is set
        if (personaId == null) {
            throw new ApiException("Missing the required parameter 'personaId' when calling deleteDefinition(Async)");
        }

        return deleteDefinitionCall(personaId, _callback);

    }


    private ApiResponse<String> deleteDefinitionWithHttpInfo(String personaId) throws ApiException {
        okhttp3.Call localVarCall = deleteDefinitionValidateBeforeCall(personaId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteDefinitionAsync(String personaId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDefinitionValidateBeforeCall(personaId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteDefinitionRequestBuilder {
        private final String personaId;

        private DeleteDefinitionRequestBuilder(String personaId) {
            this.personaId = personaId;
        }

        /**
         * Build call for deleteDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteDefinitionCall(personaId, _callback);
        }


        /**
         * Execute deleteDefinition request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = deleteDefinitionWithHttpInfo(personaId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteDefinition request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return deleteDefinitionWithHttpInfo(personaId);
        }

        /**
         * Execute deleteDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return deleteDefinitionAsync(personaId, _callback);
        }
    }

    /**
     * Delete a persona definition.
     * Deletes a custom persona for a provided &#x60;persona_id&#x60;.  Personas with facet type other than &#x60;custom&#x60; cannot be deleted. Attempting to delete a persona with facet type other than &#x60;custom&#x60; will result in a 403 Forbidden error.
     * @param personaId Persona ID (required)
     * @return DeleteDefinitionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDefinitionRequestBuilder deleteDefinition(String personaId) throws IllegalArgumentException {
        if (personaId == null) throw new IllegalArgumentException("\"personaId\" is required but got null");
            

        return new DeleteDefinitionRequestBuilder(personaId);
    }
    private okhttp3.Call getAllFacetAttributesCall(ModelsBatchUserPersonasRequest modelsBatchUserPersonasRequest, String moduleId, String month, Double personaScoreThreshold, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelsBatchUserPersonasRequest;

        // create path and map variables
        String localVarPath = "/batch/user/personas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("month", month));
        }

        if (personaScoreThreshold != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("persona_score_threshold", personaScoreThreshold));
        }

        if (moduleId != null) {
            localVarHeaderParams.put("module-id", localVarApiClient.parameterToString(moduleId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllFacetAttributesValidateBeforeCall(ModelsBatchUserPersonasRequest modelsBatchUserPersonasRequest, String moduleId, String month, Double personaScoreThreshold, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelsBatchUserPersonasRequest' is set
        if (modelsBatchUserPersonasRequest == null) {
            throw new ApiException("Missing the required parameter 'modelsBatchUserPersonasRequest' when calling getAllFacetAttributes(Async)");
        }

        return getAllFacetAttributesCall(modelsBatchUserPersonasRequest, moduleId, month, personaScoreThreshold, _callback);

    }


    private ApiResponse<List<ModelsUserPersonasResponse>> getAllFacetAttributesWithHttpInfo(ModelsBatchUserPersonasRequest modelsBatchUserPersonasRequest, String moduleId, String month, Double personaScoreThreshold) throws ApiException {
        okhttp3.Call localVarCall = getAllFacetAttributesValidateBeforeCall(modelsBatchUserPersonasRequest, moduleId, month, personaScoreThreshold, null);
        Type localVarReturnType = new TypeToken<List<ModelsUserPersonasResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllFacetAttributesAsync(ModelsBatchUserPersonasRequest modelsBatchUserPersonasRequest, String moduleId, String month, Double personaScoreThreshold, final ApiCallback<List<ModelsUserPersonasResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllFacetAttributesValidateBeforeCall(modelsBatchUserPersonasRequest, moduleId, month, personaScoreThreshold, _callback);
        Type localVarReturnType = new TypeToken<List<ModelsUserPersonasResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllFacetAttributesRequestBuilder {
        private final List<String> userIds;
        private String moduleId;
        private String month;
        private Double personaScoreThreshold;

        private GetAllFacetAttributesRequestBuilder(List<String> userIds) {
            this.userIds = userIds;
        }

        /**
         * Set moduleId
         * @param moduleId Module ID (optional)
         * @return GetAllFacetAttributesRequestBuilder
         */
        public GetAllFacetAttributesRequestBuilder moduleId(String moduleId) {
            this.moduleId = moduleId;
            return this;
        }
        
        /**
         * Set month
         * @param month Reference month for persona scores in &#x60;YYYY-MM&#x60; format. (optional)
         * @return GetAllFacetAttributesRequestBuilder
         */
        public GetAllFacetAttributesRequestBuilder month(String month) {
            this.month = month;
            return this;
        }
        
        /**
         * Set personaScoreThreshold
         * @param personaScoreThreshold Minimum user persona score threshold to be included in the response. (optional)
         * @return GetAllFacetAttributesRequestBuilder
         */
        public GetAllFacetAttributesRequestBuilder personaScoreThreshold(Double personaScoreThreshold) {
            this.personaScoreThreshold = personaScoreThreshold;
            return this;
        }
        
        /**
         * Build call for getAllFacetAttributes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ModelsBatchUserPersonasRequest modelsBatchUserPersonasRequest = buildBodyParams();
            return getAllFacetAttributesCall(modelsBatchUserPersonasRequest, moduleId, month, personaScoreThreshold, _callback);
        }

        private ModelsBatchUserPersonasRequest buildBodyParams() {
            ModelsBatchUserPersonasRequest modelsBatchUserPersonasRequest = new ModelsBatchUserPersonasRequest();
            modelsBatchUserPersonasRequest.userIds(this.userIds);
            return modelsBatchUserPersonasRequest;
        }

        /**
         * Execute getAllFacetAttributes request
         * @return List&lt;ModelsUserPersonasResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public List<ModelsUserPersonasResponse> execute() throws ApiException {
            ModelsBatchUserPersonasRequest modelsBatchUserPersonasRequest = buildBodyParams();
            ApiResponse<List<ModelsUserPersonasResponse>> localVarResp = getAllFacetAttributesWithHttpInfo(modelsBatchUserPersonasRequest, moduleId, month, personaScoreThreshold);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllFacetAttributes request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ModelsUserPersonasResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ModelsUserPersonasResponse>> executeWithHttpInfo() throws ApiException {
            ModelsBatchUserPersonasRequest modelsBatchUserPersonasRequest = buildBodyParams();
            return getAllFacetAttributesWithHttpInfo(modelsBatchUserPersonasRequest, moduleId, month, personaScoreThreshold);
        }

        /**
         * Execute getAllFacetAttributes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ModelsUserPersonasResponse>> _callback) throws ApiException {
            ModelsBatchUserPersonasRequest modelsBatchUserPersonasRequest = buildBodyParams();
            return getAllFacetAttributesAsync(modelsBatchUserPersonasRequest, moduleId, month, personaScoreThreshold, _callback);
        }
    }

    /**
     * Get all the facet attributes for a list of users.
     * Returns all personas associated with a user.
     * @param modelsBatchUserPersonasRequest List of user IDs (required)
     * @return GetAllFacetAttributesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public GetAllFacetAttributesRequestBuilder getAllFacetAttributes(List<String> userIds) throws IllegalArgumentException {
        if (userIds == null) throw new IllegalArgumentException("\"userIds\" is required but got null");
        return new GetAllFacetAttributesRequestBuilder(userIds);
    }
    private okhttp3.Call getPercentileScoreCall(String personaId, Double percentile, String moduleId, String month, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persona/{persona_id}/percentile_score"
            .replace("{" + "persona_id" + "}", localVarApiClient.escapeString(personaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (percentile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentile", percentile));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("month", month));
        }

        if (moduleId != null) {
            localVarHeaderParams.put("module-id", localVarApiClient.parameterToString(moduleId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPercentileScoreValidateBeforeCall(String personaId, Double percentile, String moduleId, String month, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personaId' is set
        if (personaId == null) {
            throw new ApiException("Missing the required parameter 'personaId' when calling getPercentileScore(Async)");
        }

        // verify the required parameter 'percentile' is set
        if (percentile == null) {
            throw new ApiException("Missing the required parameter 'percentile' when calling getPercentileScore(Async)");
        }

        return getPercentileScoreCall(personaId, percentile, moduleId, month, _callback);

    }


    private ApiResponse<ModelsPercentileScore> getPercentileScoreWithHttpInfo(String personaId, Double percentile, String moduleId, String month) throws ApiException {
        okhttp3.Call localVarCall = getPercentileScoreValidateBeforeCall(personaId, percentile, moduleId, month, null);
        Type localVarReturnType = new TypeToken<ModelsPercentileScore>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPercentileScoreAsync(String personaId, Double percentile, String moduleId, String month, final ApiCallback<ModelsPercentileScore> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPercentileScoreValidateBeforeCall(personaId, percentile, moduleId, month, _callback);
        Type localVarReturnType = new TypeToken<ModelsPercentileScore>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPercentileScoreRequestBuilder {
        private final String personaId;
        private final Double percentile;
        private String moduleId;
        private String month;

        private GetPercentileScoreRequestBuilder(String personaId, double percentile) {
            this.personaId = personaId;
            this.percentile = percentile;
        }

        /**
         * Set moduleId
         * @param moduleId Module ID (optional)
         * @return GetPercentileScoreRequestBuilder
         */
        public GetPercentileScoreRequestBuilder moduleId(String moduleId) {
            this.moduleId = moduleId;
            return this;
        }
        
        /**
         * Set month
         * @param month Reference month for persona scores in &#x60;YYYY-MM&#x60; format. Defaults to current month. (optional)
         * @return GetPercentileScoreRequestBuilder
         */
        public GetPercentileScoreRequestBuilder month(String month) {
            this.month = month;
            return this;
        }
        
        /**
         * Build call for getPercentileScore
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPercentileScoreCall(personaId, percentile, moduleId, month, _callback);
        }


        /**
         * Execute getPercentileScore request
         * @return ModelsPercentileScore
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ModelsPercentileScore execute() throws ApiException {
            ApiResponse<ModelsPercentileScore> localVarResp = getPercentileScoreWithHttpInfo(personaId, percentile, moduleId, month);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPercentileScore request with HTTP info returned
         * @return ApiResponse&lt;ModelsPercentileScore&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelsPercentileScore> executeWithHttpInfo() throws ApiException {
            return getPercentileScoreWithHttpInfo(personaId, percentile, moduleId, month);
        }

        /**
         * Execute getPercentileScore request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelsPercentileScore> _callback) throws ApiException {
            return getPercentileScoreAsync(personaId, percentile, moduleId, month, _callback);
        }
    }

    /**
     * Fetch score on a given percentile for a persona id.
     * Returns the score associated with a given percentile for a persona id.
     * @param personaId Persona ID (required)
     * @param percentile Target percentile. Defaults to 50th percentile (i.e.: the median) (required)
     * @return GetPercentileScoreRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public GetPercentileScoreRequestBuilder getPercentileScore(String personaId, double percentile) throws IllegalArgumentException {
        if (personaId == null) throw new IllegalArgumentException("\"personaId\" is required but got null");
            

        
        return new GetPercentileScoreRequestBuilder(personaId, percentile);
    }
    private okhttp3.Call getPersonaStatisticsCall(String personaId, String moduleId, String month, Double personaScoreThreshold, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persona/{persona_id}"
            .replace("{" + "persona_id" + "}", localVarApiClient.escapeString(personaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("month", month));
        }

        if (personaScoreThreshold != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("persona_score_threshold", personaScoreThreshold));
        }

        if (moduleId != null) {
            localVarHeaderParams.put("module-id", localVarApiClient.parameterToString(moduleId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonaStatisticsValidateBeforeCall(String personaId, String moduleId, String month, Double personaScoreThreshold, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personaId' is set
        if (personaId == null) {
            throw new ApiException("Missing the required parameter 'personaId' when calling getPersonaStatistics(Async)");
        }

        return getPersonaStatisticsCall(personaId, moduleId, month, personaScoreThreshold, _callback);

    }


    private ApiResponse<ModelsPersonaDetailsResponse> getPersonaStatisticsWithHttpInfo(String personaId, String moduleId, String month, Double personaScoreThreshold) throws ApiException {
        okhttp3.Call localVarCall = getPersonaStatisticsValidateBeforeCall(personaId, moduleId, month, personaScoreThreshold, null);
        Type localVarReturnType = new TypeToken<ModelsPersonaDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPersonaStatisticsAsync(String personaId, String moduleId, String month, Double personaScoreThreshold, final ApiCallback<ModelsPersonaDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonaStatisticsValidateBeforeCall(personaId, moduleId, month, personaScoreThreshold, _callback);
        Type localVarReturnType = new TypeToken<ModelsPersonaDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPersonaStatisticsRequestBuilder {
        private final String personaId;
        private String moduleId;
        private String month;
        private Double personaScoreThreshold;

        private GetPersonaStatisticsRequestBuilder(String personaId) {
            this.personaId = personaId;
        }

        /**
         * Set moduleId
         * @param moduleId Module ID (optional)
         * @return GetPersonaStatisticsRequestBuilder
         */
        public GetPersonaStatisticsRequestBuilder moduleId(String moduleId) {
            this.moduleId = moduleId;
            return this;
        }
        
        /**
         * Set month
         * @param month Reference month for persona scores in &#x60;YYYY-MM&#x60; format. Defaults to current month. (optional)
         * @return GetPersonaStatisticsRequestBuilder
         */
        public GetPersonaStatisticsRequestBuilder month(String month) {
            this.month = month;
            return this;
        }
        
        /**
         * Set personaScoreThreshold
         * @param personaScoreThreshold Minimum user persona score threshold to count a user as belonging to a persona in the response. (optional)
         * @return GetPersonaStatisticsRequestBuilder
         */
        public GetPersonaStatisticsRequestBuilder personaScoreThreshold(Double personaScoreThreshold) {
            this.personaScoreThreshold = personaScoreThreshold;
            return this;
        }
        
        /**
         * Build call for getPersonaStatistics
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPersonaStatisticsCall(personaId, moduleId, month, personaScoreThreshold, _callback);
        }


        /**
         * Execute getPersonaStatistics request
         * @return ModelsPersonaDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ModelsPersonaDetailsResponse execute() throws ApiException {
            ApiResponse<ModelsPersonaDetailsResponse> localVarResp = getPersonaStatisticsWithHttpInfo(personaId, moduleId, month, personaScoreThreshold);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPersonaStatistics request with HTTP info returned
         * @return ApiResponse&lt;ModelsPersonaDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelsPersonaDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getPersonaStatisticsWithHttpInfo(personaId, moduleId, month, personaScoreThreshold);
        }

        /**
         * Execute getPersonaStatistics request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelsPersonaDetailsResponse> _callback) throws ApiException {
            return getPersonaStatisticsAsync(personaId, moduleId, month, personaScoreThreshold, _callback);
        }
    }

    /**
     * Fetch information and score statistics about a persona definition.
     * Returns statistics and information about a persona definition.  The response includes the original persona definition, its creation date, as well as statistics about the persona&#39;s score distribution (e.g. number of users, average score, score percentiles, etc.). You can also specify the minimum persona score threshold that a user must meet to be included in the response.  You must provide a valid persona ID. Otherwise, a 404 (Not Found) error will be returned.
     * @param personaId Persona ID (required)
     * @return GetPersonaStatisticsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public GetPersonaStatisticsRequestBuilder getPersonaStatistics(String personaId) throws IllegalArgumentException {
        if (personaId == null) throw new IllegalArgumentException("\"personaId\" is required but got null");
            

        return new GetPersonaStatisticsRequestBuilder(personaId);
    }
    private okhttp3.Call getRankedUsersCall(String personaId, ModelsPostPersonaUsersRequest modelsPostPersonaUsersRequest, String moduleId, Integer pageNumber, Integer pageSize, String month, Double personaScoreThreshold, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelsPostPersonaUsersRequest;

        // create path and map variables
        String localVarPath = "/persona/{persona_id}/users"
            .replace("{" + "persona_id" + "}", localVarApiClient.escapeString(personaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_number", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("month", month));
        }

        if (personaScoreThreshold != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("persona_score_threshold", personaScoreThreshold));
        }

        if (moduleId != null) {
            localVarHeaderParams.put("module-id", localVarApiClient.parameterToString(moduleId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRankedUsersValidateBeforeCall(String personaId, ModelsPostPersonaUsersRequest modelsPostPersonaUsersRequest, String moduleId, Integer pageNumber, Integer pageSize, String month, Double personaScoreThreshold, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personaId' is set
        if (personaId == null) {
            throw new ApiException("Missing the required parameter 'personaId' when calling getRankedUsers(Async)");
        }

        // verify the required parameter 'modelsPostPersonaUsersRequest' is set
        if (modelsPostPersonaUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'modelsPostPersonaUsersRequest' when calling getRankedUsers(Async)");
        }

        return getRankedUsersCall(personaId, modelsPostPersonaUsersRequest, moduleId, pageNumber, pageSize, month, personaScoreThreshold, _callback);

    }


    private ApiResponse<ModelsPersonaUsersResponse> getRankedUsersWithHttpInfo(String personaId, ModelsPostPersonaUsersRequest modelsPostPersonaUsersRequest, String moduleId, Integer pageNumber, Integer pageSize, String month, Double personaScoreThreshold) throws ApiException {
        okhttp3.Call localVarCall = getRankedUsersValidateBeforeCall(personaId, modelsPostPersonaUsersRequest, moduleId, pageNumber, pageSize, month, personaScoreThreshold, null);
        Type localVarReturnType = new TypeToken<ModelsPersonaUsersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRankedUsersAsync(String personaId, ModelsPostPersonaUsersRequest modelsPostPersonaUsersRequest, String moduleId, Integer pageNumber, Integer pageSize, String month, Double personaScoreThreshold, final ApiCallback<ModelsPersonaUsersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRankedUsersValidateBeforeCall(personaId, modelsPostPersonaUsersRequest, moduleId, pageNumber, pageSize, month, personaScoreThreshold, _callback);
        Type localVarReturnType = new TypeToken<ModelsPersonaUsersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRankedUsersRequestBuilder {
        private final List<String> blocklist;
        private final ModelsCategoricalAttributeFilter branch;
        private final String personaId;
        private ModelsTimestampAttributeFilter birthDate;
        private ModelsCategoricalAttributeFilter cboCode;
        private ModelsNumericalAttributeFilter declaredMonthlyIncome;
        private ModelsCategoricalAttributeFilter jobTitle;
        private String moduleId;
        private Integer pageNumber;
        private Integer pageSize;
        private String month;
        private Double personaScoreThreshold;

        private GetRankedUsersRequestBuilder(List<String> blocklist, ModelsCategoricalAttributeFilter branch, String personaId) {
            this.blocklist = blocklist;
            this.branch = branch;
            this.personaId = personaId;
        }

        /**
         * Set birthDate
         * @param birthDate Filter birth date based on a date range (optional)
         * @return GetRankedUsersRequestBuilder
         */
        public GetRankedUsersRequestBuilder birthDate(ModelsTimestampAttributeFilter birthDate) {
            this.birthDate = birthDate;
            return this;
        }
        
        /**
         * Set cboCode
         * @param cboCode Filter cbo code based on a list of allowed values (optional)
         * @return GetRankedUsersRequestBuilder
         */
        public GetRankedUsersRequestBuilder cboCode(ModelsCategoricalAttributeFilter cboCode) {
            this.cboCode = cboCode;
            return this;
        }
        
        /**
         * Set declaredMonthlyIncome
         * @param declaredMonthlyIncome Filter declared monthly income based on a numeric range (optional)
         * @return GetRankedUsersRequestBuilder
         */
        public GetRankedUsersRequestBuilder declaredMonthlyIncome(ModelsNumericalAttributeFilter declaredMonthlyIncome) {
            this.declaredMonthlyIncome = declaredMonthlyIncome;
            return this;
        }
        
        /**
         * Set jobTitle
         * @param jobTitle Filter job title based on a list of allowed values (optional)
         * @return GetRankedUsersRequestBuilder
         */
        public GetRankedUsersRequestBuilder jobTitle(ModelsCategoricalAttributeFilter jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set moduleId
         * @param moduleId Module ID (optional)
         * @return GetRankedUsersRequestBuilder
         */
        public GetRankedUsersRequestBuilder moduleId(String moduleId) {
            this.moduleId = moduleId;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber Page number, starting at 1 (optional, default to 1)
         * @return GetRankedUsersRequestBuilder
         */
        public GetRankedUsersRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of users scored in run per page, between 1 and 10000. Defaults to 500. (optional, default to 500)
         * @return GetRankedUsersRequestBuilder
         */
        public GetRankedUsersRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set month
         * @param month Reference month for persona scores in &#x60;YYYY-MM&#x60; format. Defaults to current month. (optional)
         * @return GetRankedUsersRequestBuilder
         */
        public GetRankedUsersRequestBuilder month(String month) {
            this.month = month;
            return this;
        }
        
        /**
         * Set personaScoreThreshold
         * @param personaScoreThreshold Minimum user persona score threshold for user to be included in the response. (optional)
         * @return GetRankedUsersRequestBuilder
         */
        public GetRankedUsersRequestBuilder personaScoreThreshold(Double personaScoreThreshold) {
            this.personaScoreThreshold = personaScoreThreshold;
            return this;
        }
        
        /**
         * Build call for getRankedUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ModelsPostPersonaUsersRequest modelsPostPersonaUsersRequest = buildBodyParams();
            return getRankedUsersCall(personaId, modelsPostPersonaUsersRequest, moduleId, pageNumber, pageSize, month, personaScoreThreshold, _callback);
        }

        private ModelsPostPersonaUsersRequest buildBodyParams() {
            ModelsPostPersonaUsersRequest modelsPostPersonaUsersRequest = new ModelsPostPersonaUsersRequest();
            modelsPostPersonaUsersRequest.birthDate(this.birthDate);
            modelsPostPersonaUsersRequest.blocklist(this.blocklist);
            modelsPostPersonaUsersRequest.branch(this.branch);
            modelsPostPersonaUsersRequest.cboCode(this.cboCode);
            modelsPostPersonaUsersRequest.declaredMonthlyIncome(this.declaredMonthlyIncome);
            modelsPostPersonaUsersRequest.jobTitle(this.jobTitle);
            return modelsPostPersonaUsersRequest;
        }

        /**
         * Execute getRankedUsers request
         * @return ModelsPersonaUsersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ModelsPersonaUsersResponse execute() throws ApiException {
            ModelsPostPersonaUsersRequest modelsPostPersonaUsersRequest = buildBodyParams();
            ApiResponse<ModelsPersonaUsersResponse> localVarResp = getRankedUsersWithHttpInfo(personaId, modelsPostPersonaUsersRequest, moduleId, pageNumber, pageSize, month, personaScoreThreshold);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRankedUsers request with HTTP info returned
         * @return ApiResponse&lt;ModelsPersonaUsersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelsPersonaUsersResponse> executeWithHttpInfo() throws ApiException {
            ModelsPostPersonaUsersRequest modelsPostPersonaUsersRequest = buildBodyParams();
            return getRankedUsersWithHttpInfo(personaId, modelsPostPersonaUsersRequest, moduleId, pageNumber, pageSize, month, personaScoreThreshold);
        }

        /**
         * Execute getRankedUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelsPersonaUsersResponse> _callback) throws ApiException {
            ModelsPostPersonaUsersRequest modelsPostPersonaUsersRequest = buildBodyParams();
            return getRankedUsersAsync(personaId, modelsPostPersonaUsersRequest, moduleId, pageNumber, pageSize, month, personaScoreThreshold, _callback);
        }
    }

    /**
     * Get ranked list of users who match a persona definition.
     * Returns a ranked list of users who match a persona definition.  Users are sorted by their persona score, with the highest scoring users appearing first. Results are paginated by default, with 500 users per page. You can specify the page number and page size by passing the &#x60;page_number&#x60; and &#x60;page_size&#x60; query parameters. (e.g. &#x60;GET /persona/{persona_id}/users?page_number&#x3D;2&amp;page_size&#x3D;100&#x60;)  You can also specify the minimum persona score threshold that a user must meet to be included in the response. If not specified, will default to the hyperplane suggested threshold for the given persona_id.  You can also use a blocklist to exclude specific users from the response.
     * @param personaId Persona ID (required)
     * @param modelsPostPersonaUsersRequest Optional user filters (required)
     * @return GetRankedUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public GetRankedUsersRequestBuilder getRankedUsers(List<String> blocklist, ModelsCategoricalAttributeFilter branch, String personaId) throws IllegalArgumentException {
        if (blocklist == null) throw new IllegalArgumentException("\"blocklist\" is required but got null");
        if (branch == null) throw new IllegalArgumentException("\"branch\" is required but got null");
        if (personaId == null) throw new IllegalArgumentException("\"personaId\" is required but got null");
            

        return new GetRankedUsersRequestBuilder(blocklist, branch, personaId);
    }
    private okhttp3.Call listExistingCall(String facetTypes, String moduleId, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persona";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (facetTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet_types", facetTypes));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_number", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (moduleId != null) {
            localVarHeaderParams.put("module-id", localVarApiClient.parameterToString(moduleId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listExistingValidateBeforeCall(String facetTypes, String moduleId, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return listExistingCall(facetTypes, moduleId, pageNumber, pageSize, _callback);

    }


    private ApiResponse<ModelsListPersonasResponse> listExistingWithHttpInfo(String facetTypes, String moduleId, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listExistingValidateBeforeCall(facetTypes, moduleId, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<ModelsListPersonasResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listExistingAsync(String facetTypes, String moduleId, Integer pageNumber, Integer pageSize, final ApiCallback<ModelsListPersonasResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listExistingValidateBeforeCall(facetTypes, moduleId, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ModelsListPersonasResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListExistingRequestBuilder {
        private String facetTypes;
        private String moduleId;
        private Integer pageNumber;
        private Integer pageSize;

        private ListExistingRequestBuilder() {
        }

        /**
         * Set facetTypes
         * @param facetTypes Comma-separated facet types to select. By default, all personas are returned. Valid facet types are: interest, demographic, pre_defined_persona, custom. (optional)
         * @return ListExistingRequestBuilder
         */
        public ListExistingRequestBuilder facetTypes(String facetTypes) {
            this.facetTypes = facetTypes;
            return this;
        }
        
        /**
         * Set moduleId
         * @param moduleId Module ID (optional)
         * @return ListExistingRequestBuilder
         */
        public ListExistingRequestBuilder moduleId(String moduleId) {
            this.moduleId = moduleId;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber Page number, starting at 1 (optional, default to 1)
         * @return ListExistingRequestBuilder
         */
        public ListExistingRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of personas per page, between 1 and 10000. Will return all personas if not specified. (optional)
         * @return ListExistingRequestBuilder
         */
        public ListExistingRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listExisting
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of personas available in the database. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listExistingCall(facetTypes, moduleId, pageNumber, pageSize, _callback);
        }


        /**
         * Execute listExisting request
         * @return ModelsListPersonasResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of personas available in the database. </td><td>  -  </td></tr>
         </table>
         */
        public ModelsListPersonasResponse execute() throws ApiException {
            ApiResponse<ModelsListPersonasResponse> localVarResp = listExistingWithHttpInfo(facetTypes, moduleId, pageNumber, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listExisting request with HTTP info returned
         * @return ApiResponse&lt;ModelsListPersonasResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of personas available in the database. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelsListPersonasResponse> executeWithHttpInfo() throws ApiException {
            return listExistingWithHttpInfo(facetTypes, moduleId, pageNumber, pageSize);
        }

        /**
         * Execute listExisting request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of personas available in the database. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelsListPersonasResponse> _callback) throws ApiException {
            return listExistingAsync(facetTypes, moduleId, pageNumber, pageSize, _callback);
        }
    }

    /**
     * List existing personas.
     * Lists all existing personas.  Personas are sorted by creation date, with the most recently created personas appearing first. By default, all personas are returned. However, you can specify the type of personas you want by passing specific facet types as a query parameter. (e.g. &#x60;GET /persona?facet_types&#x3D;interest,demographic&#x60;) Optionally, you can paginate the results by specifying the &#x60;page_number&#x60; and &#x60;page_size&#x60; query parameters. If either &#x60;page_number&#x60; and &#x60;page_size&#x60; are not specified, all personas will be returned.
     * @return ListExistingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of personas available in the database. </td><td>  -  </td></tr>
     </table>
     */
    public ListExistingRequestBuilder listExisting() throws IllegalArgumentException {
        return new ListExistingRequestBuilder();
    }
    private okhttp3.Call listUserPersonasCall(String userId, String moduleId, String month, Double personaScoreThreshold, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/personas"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("month", month));
        }

        if (personaScoreThreshold != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("persona_score_threshold", personaScoreThreshold));
        }

        if (moduleId != null) {
            localVarHeaderParams.put("module-id", localVarApiClient.parameterToString(moduleId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PASETO" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserPersonasValidateBeforeCall(String userId, String moduleId, String month, Double personaScoreThreshold, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listUserPersonas(Async)");
        }

        return listUserPersonasCall(userId, moduleId, month, personaScoreThreshold, _callback);

    }


    private ApiResponse<ModelsUserPersonasResponse> listUserPersonasWithHttpInfo(String userId, String moduleId, String month, Double personaScoreThreshold) throws ApiException {
        okhttp3.Call localVarCall = listUserPersonasValidateBeforeCall(userId, moduleId, month, personaScoreThreshold, null);
        Type localVarReturnType = new TypeToken<ModelsUserPersonasResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUserPersonasAsync(String userId, String moduleId, String month, Double personaScoreThreshold, final ApiCallback<ModelsUserPersonasResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserPersonasValidateBeforeCall(userId, moduleId, month, personaScoreThreshold, _callback);
        Type localVarReturnType = new TypeToken<ModelsUserPersonasResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUserPersonasRequestBuilder {
        private final String userId;
        private String moduleId;
        private String month;
        private Double personaScoreThreshold;

        private ListUserPersonasRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set moduleId
         * @param moduleId Module ID (optional)
         * @return ListUserPersonasRequestBuilder
         */
        public ListUserPersonasRequestBuilder moduleId(String moduleId) {
            this.moduleId = moduleId;
            return this;
        }
        
        /**
         * Set month
         * @param month Reference month for persona scores in &#x60;YYYY-MM&#x60; format. (optional)
         * @return ListUserPersonasRequestBuilder
         */
        public ListUserPersonasRequestBuilder month(String month) {
            this.month = month;
            return this;
        }
        
        /**
         * Set personaScoreThreshold
         * @param personaScoreThreshold Minimum user persona score threshold to be included in the response. (optional)
         * @return ListUserPersonasRequestBuilder
         */
        public ListUserPersonasRequestBuilder personaScoreThreshold(Double personaScoreThreshold) {
            this.personaScoreThreshold = personaScoreThreshold;
            return this;
        }
        
        /**
         * Build call for listUserPersonas
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUserPersonasCall(userId, moduleId, month, personaScoreThreshold, _callback);
        }


        /**
         * Execute listUserPersonas request
         * @return ModelsUserPersonasResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ModelsUserPersonasResponse execute() throws ApiException {
            ApiResponse<ModelsUserPersonasResponse> localVarResp = listUserPersonasWithHttpInfo(userId, moduleId, month, personaScoreThreshold);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUserPersonas request with HTTP info returned
         * @return ApiResponse&lt;ModelsUserPersonasResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelsUserPersonasResponse> executeWithHttpInfo() throws ApiException {
            return listUserPersonasWithHttpInfo(userId, moduleId, month, personaScoreThreshold);
        }

        /**
         * Execute listUserPersonas request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelsUserPersonasResponse> _callback) throws ApiException {
            return listUserPersonasAsync(userId, moduleId, month, personaScoreThreshold, _callback);
        }
    }

    /**
     * List personas associated with a user.
     * Returns a list of personas and their scores for a given user. Personas are sorted by their persona score, in descending order.  You can also specify the minimum persona score threshold that a user must meet to be included in the response. Defaults to hyperplane&#39;s suggested threshold to determine if the user belongs to the persona.
     * @param userId User ID (required)
     * @return ListUserPersonasRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ListUserPersonasRequestBuilder listUserPersonas(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ListUserPersonasRequestBuilder(userId);
    }
}
