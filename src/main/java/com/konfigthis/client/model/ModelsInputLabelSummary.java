/*
 * Hyperplane API Gateway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ModelsInputLabelSummary
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ModelsInputLabelSummary {
  public static final String SERIALIZED_NAME_LABEL_WEIGHT_COUNTS = "label_weight_counts";
  @SerializedName(SERIALIZED_NAME_LABEL_WEIGHT_COUNTS)
  private Map<String, Integer> labelWeightCounts = null;

  public static final String SERIALIZED_NAME_MONTHLY_COUNTS = "monthly_counts";
  @SerializedName(SERIALIZED_NAME_MONTHLY_COUNTS)
  private Map<String, Integer> monthlyCounts = null;

  public static final String SERIALIZED_NAME_MONTHLY_POSITIVE_RATES = "monthly_positive_rates";
  @SerializedName(SERIALIZED_NAME_MONTHLY_POSITIVE_RATES)
  private Map<String, Double> monthlyPositiveRates = null;

  public static final String SERIALIZED_NAME_NUM_INPUT_LABELS = "num_input_labels";
  @SerializedName(SERIALIZED_NAME_NUM_INPUT_LABELS)
  private Integer numInputLabels;

  public static final String SERIALIZED_NAME_NUM_INPUT_USERS = "num_input_users";
  @SerializedName(SERIALIZED_NAME_NUM_INPUT_USERS)
  private Integer numInputUsers;

  public static final String SERIALIZED_NAME_NUM_MATCHED_LABELS = "num_matched_labels";
  @SerializedName(SERIALIZED_NAME_NUM_MATCHED_LABELS)
  private Integer numMatchedLabels;

  public static final String SERIALIZED_NAME_NUM_TRAINING_USERS = "num_training_users";
  @SerializedName(SERIALIZED_NAME_NUM_TRAINING_USERS)
  private Integer numTrainingUsers;

  public ModelsInputLabelSummary() {
  }

  public ModelsInputLabelSummary labelWeightCounts(Map<String, Integer> labelWeightCounts) {
    
    
    
    
    this.labelWeightCounts = labelWeightCounts;
    return this;
  }

  public ModelsInputLabelSummary putLabelWeightCountsItem(String key, Integer labelWeightCountsItem) {
    if (this.labelWeightCounts == null) {
      this.labelWeightCounts = new HashMap<>();
    }
    this.labelWeightCounts.put(key, labelWeightCountsItem);
    return this;
  }

   /**
   * Counts of given labels, broken down by label and weight. The keys are stringified pairs of (label_value, weight_value).
   * @return labelWeightCounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Counts of given labels, broken down by label and weight. The keys are stringified pairs of (label_value, weight_value).")

  public Map<String, Integer> getLabelWeightCounts() {
    return labelWeightCounts;
  }


  public void setLabelWeightCounts(Map<String, Integer> labelWeightCounts) {
    
    
    
    this.labelWeightCounts = labelWeightCounts;
  }


  public ModelsInputLabelSummary monthlyCounts(Map<String, Integer> monthlyCounts) {
    
    
    
    
    this.monthlyCounts = monthlyCounts;
    return this;
  }

  public ModelsInputLabelSummary putMonthlyCountsItem(String key, Integer monthlyCountsItem) {
    if (this.monthlyCounts == null) {
      this.monthlyCounts = new HashMap<>();
    }
    this.monthlyCounts.put(key, monthlyCountsItem);
    return this;
  }

   /**
   * For each month (shown in YYYY-MM format), the number of labels given.
   * @return monthlyCounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "For each month (shown in YYYY-MM format), the number of labels given.")

  public Map<String, Integer> getMonthlyCounts() {
    return monthlyCounts;
  }


  public void setMonthlyCounts(Map<String, Integer> monthlyCounts) {
    
    
    
    this.monthlyCounts = monthlyCounts;
  }


  public ModelsInputLabelSummary monthlyPositiveRates(Map<String, Double> monthlyPositiveRates) {
    
    
    
    
    this.monthlyPositiveRates = monthlyPositiveRates;
    return this;
  }

  public ModelsInputLabelSummary putMonthlyPositiveRatesItem(String key, Double monthlyPositiveRatesItem) {
    if (this.monthlyPositiveRates == null) {
      this.monthlyPositiveRates = new HashMap<>();
    }
    this.monthlyPositiveRates.put(key, monthlyPositiveRatesItem);
    return this;
  }

   /**
   * For each month (shown in YYYY-MM format), what is the rate of positive labels given.
   * @return monthlyPositiveRates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "For each month (shown in YYYY-MM format), what is the rate of positive labels given.")

  public Map<String, Double> getMonthlyPositiveRates() {
    return monthlyPositiveRates;
  }


  public void setMonthlyPositiveRates(Map<String, Double> monthlyPositiveRates) {
    
    
    
    this.monthlyPositiveRates = monthlyPositiveRates;
  }


  public ModelsInputLabelSummary numInputLabels(Integer numInputLabels) {
    
    
    
    
    this.numInputLabels = numInputLabels;
    return this;
  }

   /**
   * Number of labels that were provided by the user.
   * @return numInputLabels
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Number of labels that were provided by the user.")

  public Integer getNumInputLabels() {
    return numInputLabels;
  }


  public void setNumInputLabels(Integer numInputLabels) {
    
    
    
    this.numInputLabels = numInputLabels;
  }


  public ModelsInputLabelSummary numInputUsers(Integer numInputUsers) {
    
    
    
    
    this.numInputUsers = numInputUsers;
    return this;
  }

   /**
   * Number of distinct users that were provided by the user
   * @return numInputUsers
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Number of distinct users that were provided by the user")

  public Integer getNumInputUsers() {
    return numInputUsers;
  }


  public void setNumInputUsers(Integer numInputUsers) {
    
    
    
    this.numInputUsers = numInputUsers;
  }


  public ModelsInputLabelSummary numMatchedLabels(Integer numMatchedLabels) {
    
    
    
    
    this.numMatchedLabels = numMatchedLabels;
    return this;
  }

   /**
   * Number of data rows that will be used in training
   * @return numMatchedLabels
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Number of data rows that will be used in training")

  public Integer getNumMatchedLabels() {
    return numMatchedLabels;
  }


  public void setNumMatchedLabels(Integer numMatchedLabels) {
    
    
    
    this.numMatchedLabels = numMatchedLabels;
  }


  public ModelsInputLabelSummary numTrainingUsers(Integer numTrainingUsers) {
    
    
    
    
    this.numTrainingUsers = numTrainingUsers;
    return this;
  }

   /**
   * Number of distinct users that will be used in training
   * @return numTrainingUsers
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Number of distinct users that will be used in training")

  public Integer getNumTrainingUsers() {
    return numTrainingUsers;
  }


  public void setNumTrainingUsers(Integer numTrainingUsers) {
    
    
    
    this.numTrainingUsers = numTrainingUsers;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ModelsInputLabelSummary instance itself
   */
  public ModelsInputLabelSummary putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsInputLabelSummary modelsInputLabelSummary = (ModelsInputLabelSummary) o;
    return Objects.equals(this.labelWeightCounts, modelsInputLabelSummary.labelWeightCounts) &&
        Objects.equals(this.monthlyCounts, modelsInputLabelSummary.monthlyCounts) &&
        Objects.equals(this.monthlyPositiveRates, modelsInputLabelSummary.monthlyPositiveRates) &&
        Objects.equals(this.numInputLabels, modelsInputLabelSummary.numInputLabels) &&
        Objects.equals(this.numInputUsers, modelsInputLabelSummary.numInputUsers) &&
        Objects.equals(this.numMatchedLabels, modelsInputLabelSummary.numMatchedLabels) &&
        Objects.equals(this.numTrainingUsers, modelsInputLabelSummary.numTrainingUsers)&&
        Objects.equals(this.additionalProperties, modelsInputLabelSummary.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(labelWeightCounts, monthlyCounts, monthlyPositiveRates, numInputLabels, numInputUsers, numMatchedLabels, numTrainingUsers, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsInputLabelSummary {\n");
    sb.append("    labelWeightCounts: ").append(toIndentedString(labelWeightCounts)).append("\n");
    sb.append("    monthlyCounts: ").append(toIndentedString(monthlyCounts)).append("\n");
    sb.append("    monthlyPositiveRates: ").append(toIndentedString(monthlyPositiveRates)).append("\n");
    sb.append("    numInputLabels: ").append(toIndentedString(numInputLabels)).append("\n");
    sb.append("    numInputUsers: ").append(toIndentedString(numInputUsers)).append("\n");
    sb.append("    numMatchedLabels: ").append(toIndentedString(numMatchedLabels)).append("\n");
    sb.append("    numTrainingUsers: ").append(toIndentedString(numTrainingUsers)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("label_weight_counts");
    openapiFields.add("monthly_counts");
    openapiFields.add("monthly_positive_rates");
    openapiFields.add("num_input_labels");
    openapiFields.add("num_input_users");
    openapiFields.add("num_matched_labels");
    openapiFields.add("num_training_users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("num_input_labels");
    openapiRequiredFields.add("num_input_users");
    openapiRequiredFields.add("num_matched_labels");
    openapiRequiredFields.add("num_training_users");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsInputLabelSummary
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelsInputLabelSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsInputLabelSummary is not found in the empty JSON string", ModelsInputLabelSummary.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModelsInputLabelSummary.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsInputLabelSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsInputLabelSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsInputLabelSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsInputLabelSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsInputLabelSummary>() {
           @Override
           public void write(JsonWriter out, ModelsInputLabelSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsInputLabelSummary read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ModelsInputLabelSummary instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsInputLabelSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsInputLabelSummary
  * @throws IOException if the JSON string is invalid with respect to ModelsInputLabelSummary
  */
  public static ModelsInputLabelSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsInputLabelSummary.class);
  }

 /**
  * Convert an instance of ModelsInputLabelSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

