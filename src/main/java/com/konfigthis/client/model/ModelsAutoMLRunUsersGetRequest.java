/*
 * Hyperplane API Gateway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ModelsTagCategoricalAttributeFilter;
import com.konfigthis.client.model.ModelsUserMetadata;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ModelsAutoMLRunUsersGetRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ModelsAutoMLRunUsersGetRequest {
  public static final String SERIALIZED_NAME_ALLOW_USERS = "allow_users";
  @SerializedName(SERIALIZED_NAME_ALLOW_USERS)
  private List<ModelsUserMetadata> allowUsers = null;

  public static final String SERIALIZED_NAME_BLOCK_USERS = "block_users";
  @SerializedName(SERIALIZED_NAME_BLOCK_USERS)
  private List<ModelsUserMetadata> blockUsers = null;

  public static final String SERIALIZED_NAME_TAG_FILTERS = "tag_filters";
  @SerializedName(SERIALIZED_NAME_TAG_FILTERS)
  private List<ModelsTagCategoricalAttributeFilter> tagFilters = null;

  public ModelsAutoMLRunUsersGetRequest() {
  }

  public ModelsAutoMLRunUsersGetRequest allowUsers(List<ModelsUserMetadata> allowUsers) {
    
    
    
    
    this.allowUsers = allowUsers;
    return this;
  }

  public ModelsAutoMLRunUsersGetRequest addAllowUsersItem(ModelsUserMetadata allowUsersItem) {
    if (this.allowUsers == null) {
      this.allowUsers = new ArrayList<>();
    }
    this.allowUsers.add(allowUsersItem);
    return this;
  }

   /**
   * List of users to return user scores for
   * @return allowUsers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of users to return user scores for")

  public List<ModelsUserMetadata> getAllowUsers() {
    return allowUsers;
  }


  public void setAllowUsers(List<ModelsUserMetadata> allowUsers) {
    
    
    
    this.allowUsers = allowUsers;
  }


  public ModelsAutoMLRunUsersGetRequest blockUsers(List<ModelsUserMetadata> blockUsers) {
    
    
    
    
    this.blockUsers = blockUsers;
    return this;
  }

  public ModelsAutoMLRunUsersGetRequest addBlockUsersItem(ModelsUserMetadata blockUsersItem) {
    if (this.blockUsers == null) {
      this.blockUsers = new ArrayList<>();
    }
    this.blockUsers.add(blockUsersItem);
    return this;
  }

   /**
   * List of users to omit from returned user scores
   * @return blockUsers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of users to omit from returned user scores")

  public List<ModelsUserMetadata> getBlockUsers() {
    return blockUsers;
  }


  public void setBlockUsers(List<ModelsUserMetadata> blockUsers) {
    
    
    
    this.blockUsers = blockUsers;
  }


  public ModelsAutoMLRunUsersGetRequest tagFilters(List<ModelsTagCategoricalAttributeFilter> tagFilters) {
    
    
    
    
    this.tagFilters = tagFilters;
    return this;
  }

  public ModelsAutoMLRunUsersGetRequest addTagFiltersItem(ModelsTagCategoricalAttributeFilter tagFiltersItem) {
    if (this.tagFilters == null) {
      this.tagFilters = new ArrayList<>();
    }
    this.tagFilters.add(tagFiltersItem);
    return this;
  }

   /**
   * Categorical Filters on pf_type metadata
   * @return tagFilters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Categorical Filters on pf_type metadata")

  public List<ModelsTagCategoricalAttributeFilter> getTagFilters() {
    return tagFilters;
  }


  public void setTagFilters(List<ModelsTagCategoricalAttributeFilter> tagFilters) {
    
    
    
    this.tagFilters = tagFilters;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ModelsAutoMLRunUsersGetRequest instance itself
   */
  public ModelsAutoMLRunUsersGetRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsAutoMLRunUsersGetRequest modelsAutoMLRunUsersGetRequest = (ModelsAutoMLRunUsersGetRequest) o;
    return Objects.equals(this.allowUsers, modelsAutoMLRunUsersGetRequest.allowUsers) &&
        Objects.equals(this.blockUsers, modelsAutoMLRunUsersGetRequest.blockUsers) &&
        Objects.equals(this.tagFilters, modelsAutoMLRunUsersGetRequest.tagFilters)&&
        Objects.equals(this.additionalProperties, modelsAutoMLRunUsersGetRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowUsers, blockUsers, tagFilters, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsAutoMLRunUsersGetRequest {\n");
    sb.append("    allowUsers: ").append(toIndentedString(allowUsers)).append("\n");
    sb.append("    blockUsers: ").append(toIndentedString(blockUsers)).append("\n");
    sb.append("    tagFilters: ").append(toIndentedString(tagFilters)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_users");
    openapiFields.add("block_users");
    openapiFields.add("tag_filters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsAutoMLRunUsersGetRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelsAutoMLRunUsersGetRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsAutoMLRunUsersGetRequest is not found in the empty JSON string", ModelsAutoMLRunUsersGetRequest.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("allow_users") != null && !jsonObj.get("allow_users").isJsonNull()) {
        JsonArray jsonArrayallowUsers = jsonObj.getAsJsonArray("allow_users");
        if (jsonArrayallowUsers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("allow_users").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allow_users` to be an array in the JSON string but got `%s`", jsonObj.get("allow_users").toString()));
          }

          // validate the optional field `allow_users` (array)
          for (int i = 0; i < jsonArrayallowUsers.size(); i++) {
            ModelsUserMetadata.validateJsonObject(jsonArrayallowUsers.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("block_users") != null && !jsonObj.get("block_users").isJsonNull()) {
        JsonArray jsonArrayblockUsers = jsonObj.getAsJsonArray("block_users");
        if (jsonArrayblockUsers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("block_users").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `block_users` to be an array in the JSON string but got `%s`", jsonObj.get("block_users").toString()));
          }

          // validate the optional field `block_users` (array)
          for (int i = 0; i < jsonArrayblockUsers.size(); i++) {
            ModelsUserMetadata.validateJsonObject(jsonArrayblockUsers.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("tag_filters") != null && !jsonObj.get("tag_filters").isJsonNull()) {
        JsonArray jsonArraytagFilters = jsonObj.getAsJsonArray("tag_filters");
        if (jsonArraytagFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tag_filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tag_filters` to be an array in the JSON string but got `%s`", jsonObj.get("tag_filters").toString()));
          }

          // validate the optional field `tag_filters` (array)
          for (int i = 0; i < jsonArraytagFilters.size(); i++) {
            ModelsTagCategoricalAttributeFilter.validateJsonObject(jsonArraytagFilters.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsAutoMLRunUsersGetRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsAutoMLRunUsersGetRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsAutoMLRunUsersGetRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsAutoMLRunUsersGetRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsAutoMLRunUsersGetRequest>() {
           @Override
           public void write(JsonWriter out, ModelsAutoMLRunUsersGetRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsAutoMLRunUsersGetRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ModelsAutoMLRunUsersGetRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsAutoMLRunUsersGetRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsAutoMLRunUsersGetRequest
  * @throws IOException if the JSON string is invalid with respect to ModelsAutoMLRunUsersGetRequest
  */
  public static ModelsAutoMLRunUsersGetRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsAutoMLRunUsersGetRequest.class);
  }

 /**
  * Convert an instance of ModelsAutoMLRunUsersGetRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

