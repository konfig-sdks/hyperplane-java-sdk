/*
 * Hyperplane API Gateway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ModelsAutoMLRunMetrics
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ModelsAutoMLRunMetrics {
  public static final String SERIALIZED_NAME_CUMULATIVE_POSITIVE_RATE = "cumulative_positive_rate";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_POSITIVE_RATE)
  private Map<String, Map<String, Double>> cumulativePositiveRate = null;

  public static final String SERIALIZED_NAME_LABEL_POSITIVE_RATE = "label_positive_rate";
  @SerializedName(SERIALIZED_NAME_LABEL_POSITIVE_RATE)
  private Double labelPositiveRate;

  public static final String SERIALIZED_NAME_POSITIVE_RATE_BY_DECILE = "positive_rate_by_decile";
  @SerializedName(SERIALIZED_NAME_POSITIVE_RATE_BY_DECILE)
  private Map<String, Double> positiveRateByDecile = null;

  public static final String SERIALIZED_NAME_TEST_AUC = "test_auc";
  @SerializedName(SERIALIZED_NAME_TEST_AUC)
  private Double testAuc;

  public static final String SERIALIZED_NAME_TEST_KS = "test_ks";
  @SerializedName(SERIALIZED_NAME_TEST_KS)
  private Double testKs;

  public static final String SERIALIZED_NAME_TRAIN_AUC = "train_auc";
  @SerializedName(SERIALIZED_NAME_TRAIN_AUC)
  private Double trainAuc;

  public static final String SERIALIZED_NAME_TRAIN_KS = "train_ks";
  @SerializedName(SERIALIZED_NAME_TRAIN_KS)
  private Double trainKs;

  public ModelsAutoMLRunMetrics() {
  }

  public ModelsAutoMLRunMetrics cumulativePositiveRate(Map<String, Map<String, Double>> cumulativePositiveRate) {
    
    
    
    
    this.cumulativePositiveRate = cumulativePositiveRate;
    return this;
  }

  public ModelsAutoMLRunMetrics putCumulativePositiveRateItem(String key, Map<String, Double> cumulativePositiveRateItem) {
    if (this.cumulativePositiveRate == null) {
      this.cumulativePositiveRate = new HashMap<>();
    }
    this.cumulativePositiveRate.put(key, cumulativePositiveRateItem);
    return this;
  }

   /**
   * Cumulative positive rates at various thresholds, including ascending (lower to higher thresholds) and descending (higher to lower thresholds). It indicates how the proportion of positive instances within the total instances changes as the classification threshold is adjusted.
   * @return cumulativePositiveRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cumulative positive rates at various thresholds, including ascending (lower to higher thresholds) and descending (higher to lower thresholds). It indicates how the proportion of positive instances within the total instances changes as the classification threshold is adjusted.")

  public Map<String, Map<String, Double>> getCumulativePositiveRate() {
    return cumulativePositiveRate;
  }


  public void setCumulativePositiveRate(Map<String, Map<String, Double>> cumulativePositiveRate) {
    
    
    
    this.cumulativePositiveRate = cumulativePositiveRate;
  }


  public ModelsAutoMLRunMetrics labelPositiveRate(Double labelPositiveRate) {
    
    
    
    
    this.labelPositiveRate = labelPositiveRate;
    return this;
  }

  public ModelsAutoMLRunMetrics labelPositiveRate(Integer labelPositiveRate) {
    
    
    
    
    this.labelPositiveRate = labelPositiveRate.doubleValue();
    return this;
  }

   /**
   * The percentage of users with positive label in the test set.
   * @return labelPositiveRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The percentage of users with positive label in the test set.")

  public Double getLabelPositiveRate() {
    return labelPositiveRate;
  }


  public void setLabelPositiveRate(Double labelPositiveRate) {
    
    
    
    this.labelPositiveRate = labelPositiveRate;
  }


  public ModelsAutoMLRunMetrics positiveRateByDecile(Map<String, Double> positiveRateByDecile) {
    
    
    
    
    this.positiveRateByDecile = positiveRateByDecile;
    return this;
  }

  public ModelsAutoMLRunMetrics putPositiveRateByDecileItem(String key, Double positiveRateByDecileItem) {
    if (this.positiveRateByDecile == null) {
      this.positiveRateByDecile = new HashMap<>();
    }
    this.positiveRateByDecile.put(key, positiveRateByDecileItem);
    return this;
  }

   /**
   * The percentage of positive examples (examples with a positive label) in each of the ten equally-sized groups (deciles) of the test data when this data is sorted based on the model&#39;s predicted scores.
   * @return positiveRateByDecile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The percentage of positive examples (examples with a positive label) in each of the ten equally-sized groups (deciles) of the test data when this data is sorted based on the model's predicted scores.")

  public Map<String, Double> getPositiveRateByDecile() {
    return positiveRateByDecile;
  }


  public void setPositiveRateByDecile(Map<String, Double> positiveRateByDecile) {
    
    
    
    this.positiveRateByDecile = positiveRateByDecile;
  }


  public ModelsAutoMLRunMetrics testAuc(Double testAuc) {
    
    
    
    
    this.testAuc = testAuc;
    return this;
  }

  public ModelsAutoMLRunMetrics testAuc(Integer testAuc) {
    
    
    
    
    this.testAuc = testAuc.doubleValue();
    return this;
  }

   /**
   * AUC of the test set
   * @return testAuc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "AUC of the test set")

  public Double getTestAuc() {
    return testAuc;
  }


  public void setTestAuc(Double testAuc) {
    
    
    
    this.testAuc = testAuc;
  }


  public ModelsAutoMLRunMetrics testKs(Double testKs) {
    
    
    
    
    this.testKs = testKs;
    return this;
  }

  public ModelsAutoMLRunMetrics testKs(Integer testKs) {
    
    
    
    
    this.testKs = testKs.doubleValue();
    return this;
  }

   /**
   * KS of the test set
   * @return testKs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "KS of the test set")

  public Double getTestKs() {
    return testKs;
  }


  public void setTestKs(Double testKs) {
    
    
    
    this.testKs = testKs;
  }


  public ModelsAutoMLRunMetrics trainAuc(Double trainAuc) {
    
    
    
    
    this.trainAuc = trainAuc;
    return this;
  }

  public ModelsAutoMLRunMetrics trainAuc(Integer trainAuc) {
    
    
    
    
    this.trainAuc = trainAuc.doubleValue();
    return this;
  }

   /**
   * AUC of the training set
   * @return trainAuc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "AUC of the training set")

  public Double getTrainAuc() {
    return trainAuc;
  }


  public void setTrainAuc(Double trainAuc) {
    
    
    
    this.trainAuc = trainAuc;
  }


  public ModelsAutoMLRunMetrics trainKs(Double trainKs) {
    
    
    
    
    this.trainKs = trainKs;
    return this;
  }

  public ModelsAutoMLRunMetrics trainKs(Integer trainKs) {
    
    
    
    
    this.trainKs = trainKs.doubleValue();
    return this;
  }

   /**
   * KS of the training set
   * @return trainKs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "KS of the training set")

  public Double getTrainKs() {
    return trainKs;
  }


  public void setTrainKs(Double trainKs) {
    
    
    
    this.trainKs = trainKs;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ModelsAutoMLRunMetrics instance itself
   */
  public ModelsAutoMLRunMetrics putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsAutoMLRunMetrics modelsAutoMLRunMetrics = (ModelsAutoMLRunMetrics) o;
    return Objects.equals(this.cumulativePositiveRate, modelsAutoMLRunMetrics.cumulativePositiveRate) &&
        Objects.equals(this.labelPositiveRate, modelsAutoMLRunMetrics.labelPositiveRate) &&
        Objects.equals(this.positiveRateByDecile, modelsAutoMLRunMetrics.positiveRateByDecile) &&
        Objects.equals(this.testAuc, modelsAutoMLRunMetrics.testAuc) &&
        Objects.equals(this.testKs, modelsAutoMLRunMetrics.testKs) &&
        Objects.equals(this.trainAuc, modelsAutoMLRunMetrics.trainAuc) &&
        Objects.equals(this.trainKs, modelsAutoMLRunMetrics.trainKs)&&
        Objects.equals(this.additionalProperties, modelsAutoMLRunMetrics.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cumulativePositiveRate, labelPositiveRate, positiveRateByDecile, testAuc, testKs, trainAuc, trainKs, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsAutoMLRunMetrics {\n");
    sb.append("    cumulativePositiveRate: ").append(toIndentedString(cumulativePositiveRate)).append("\n");
    sb.append("    labelPositiveRate: ").append(toIndentedString(labelPositiveRate)).append("\n");
    sb.append("    positiveRateByDecile: ").append(toIndentedString(positiveRateByDecile)).append("\n");
    sb.append("    testAuc: ").append(toIndentedString(testAuc)).append("\n");
    sb.append("    testKs: ").append(toIndentedString(testKs)).append("\n");
    sb.append("    trainAuc: ").append(toIndentedString(trainAuc)).append("\n");
    sb.append("    trainKs: ").append(toIndentedString(trainKs)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cumulative_positive_rate");
    openapiFields.add("label_positive_rate");
    openapiFields.add("positive_rate_by_decile");
    openapiFields.add("test_auc");
    openapiFields.add("test_ks");
    openapiFields.add("train_auc");
    openapiFields.add("train_ks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsAutoMLRunMetrics
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelsAutoMLRunMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsAutoMLRunMetrics is not found in the empty JSON string", ModelsAutoMLRunMetrics.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsAutoMLRunMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsAutoMLRunMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsAutoMLRunMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsAutoMLRunMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsAutoMLRunMetrics>() {
           @Override
           public void write(JsonWriter out, ModelsAutoMLRunMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsAutoMLRunMetrics read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ModelsAutoMLRunMetrics instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsAutoMLRunMetrics given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsAutoMLRunMetrics
  * @throws IOException if the JSON string is invalid with respect to ModelsAutoMLRunMetrics
  */
  public static ModelsAutoMLRunMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsAutoMLRunMetrics.class);
  }

 /**
  * Convert an instance of ModelsAutoMLRunMetrics to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

