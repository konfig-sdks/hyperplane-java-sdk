/*
 * Hyperplane API Gateway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Location where the transaction happened
 */
@ApiModel(description = "Location where the transaction happened")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ModelsLocation {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_CITY_CODE = "city_code";
  @SerializedName(SERIALIZED_NAME_CITY_CODE)
  private String cityCode;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_FULL_ADDRESS = "full_address";
  @SerializedName(SERIALIZED_NAME_FULL_ADDRESS)
  private String fullAddress;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal_code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_PRIMARY_ADDRESS = "primary_address";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ADDRESS)
  private String primaryAddress;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ModelsLocation() {
  }

  public ModelsLocation city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * City name
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "City name")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public ModelsLocation cityCode(String cityCode) {
    
    
    
    
    this.cityCode = cityCode;
    return this;
  }

   /**
   * IBGE city code
   * @return cityCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "IBGE city code")

  public String getCityCode() {
    return cityCode;
  }


  public void setCityCode(String cityCode) {
    
    
    
    this.cityCode = cityCode;
  }


  public ModelsLocation country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * Country name
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Country name")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public ModelsLocation fullAddress(String fullAddress) {
    
    
    
    
    this.fullAddress = fullAddress;
    return this;
  }

   /**
   * Full address (e.g., Av. Lúcio Costa 1234, Copacabana, Rio de Janeiro, Brasil)
   * @return fullAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Full address (e.g., Av. Lúcio Costa 1234, Copacabana, Rio de Janeiro, Brasil)")

  public String getFullAddress() {
    return fullAddress;
  }


  public void setFullAddress(String fullAddress) {
    
    
    
    this.fullAddress = fullAddress;
  }


  public ModelsLocation latitude(Double latitude) {
    
    
    
    
    this.latitude = latitude;
    return this;
  }

  public ModelsLocation latitude(Integer latitude) {
    
    
    
    
    this.latitude = latitude.doubleValue();
    return this;
  }

   /**
   * Location latitude
   * @return latitude
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Location latitude")

  public Double getLatitude() {
    return latitude;
  }


  public void setLatitude(Double latitude) {
    
    
    
    this.latitude = latitude;
  }


  public ModelsLocation longitude(Double longitude) {
    
    
    
    
    this.longitude = longitude;
    return this;
  }

  public ModelsLocation longitude(Integer longitude) {
    
    
    
    
    this.longitude = longitude.doubleValue();
    return this;
  }

   /**
   * Location longitude
   * @return longitude
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Location longitude")

  public Double getLongitude() {
    return longitude;
  }


  public void setLongitude(Double longitude) {
    
    
    
    this.longitude = longitude;
  }


  public ModelsLocation postalCode(String postalCode) {
    
    
    
    
    this.postalCode = postalCode;
    return this;
  }

   /**
   * Postal code (i.e., CEP, e.g., &#39;22620-171&#39;)
   * @return postalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Postal code (i.e., CEP, e.g., '22620-171')")

  public String getPostalCode() {
    return postalCode;
  }


  public void setPostalCode(String postalCode) {
    
    
    
    this.postalCode = postalCode;
  }


  public ModelsLocation primaryAddress(String primaryAddress) {
    
    
    
    
    this.primaryAddress = primaryAddress;
    return this;
  }

   /**
   * Primary address (e.g., Av. Lúcio Costa, 1234)
   * @return primaryAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Primary address (e.g., Av. Lúcio Costa, 1234)")

  public String getPrimaryAddress() {
    return primaryAddress;
  }


  public void setPrimaryAddress(String primaryAddress) {
    
    
    
    this.primaryAddress = primaryAddress;
  }


  public ModelsLocation state(String state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * State name
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "State name")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    
    this.state = state;
  }


  public ModelsLocation type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Type of location (e.g., personal, home, business, ...)
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of location (e.g., personal, home, business, ...)")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ModelsLocation instance itself
   */
  public ModelsLocation putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsLocation modelsLocation = (ModelsLocation) o;
    return Objects.equals(this.city, modelsLocation.city) &&
        Objects.equals(this.cityCode, modelsLocation.cityCode) &&
        Objects.equals(this.country, modelsLocation.country) &&
        Objects.equals(this.fullAddress, modelsLocation.fullAddress) &&
        Objects.equals(this.latitude, modelsLocation.latitude) &&
        Objects.equals(this.longitude, modelsLocation.longitude) &&
        Objects.equals(this.postalCode, modelsLocation.postalCode) &&
        Objects.equals(this.primaryAddress, modelsLocation.primaryAddress) &&
        Objects.equals(this.state, modelsLocation.state) &&
        Objects.equals(this.type, modelsLocation.type)&&
        Objects.equals(this.additionalProperties, modelsLocation.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, cityCode, country, fullAddress, latitude, longitude, postalCode, primaryAddress, state, type, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsLocation {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    cityCode: ").append(toIndentedString(cityCode)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    fullAddress: ").append(toIndentedString(fullAddress)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    primaryAddress: ").append(toIndentedString(primaryAddress)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("city_code");
    openapiFields.add("country");
    openapiFields.add("full_address");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("postal_code");
    openapiFields.add("primary_address");
    openapiFields.add("state");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsLocation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelsLocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsLocation is not found in the empty JSON string", ModelsLocation.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("city_code") != null && !jsonObj.get("city_code").isJsonNull()) && !jsonObj.get("city_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city_code").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("full_address") != null && !jsonObj.get("full_address").isJsonNull()) && !jsonObj.get("full_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_address").toString()));
      }
      if ((jsonObj.get("postal_code") != null && !jsonObj.get("postal_code").isJsonNull()) && !jsonObj.get("postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal_code").toString()));
      }
      if ((jsonObj.get("primary_address") != null && !jsonObj.get("primary_address").isJsonNull()) && !jsonObj.get("primary_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_address").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsLocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsLocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsLocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsLocation.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsLocation>() {
           @Override
           public void write(JsonWriter out, ModelsLocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsLocation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ModelsLocation instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsLocation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsLocation
  * @throws IOException if the JSON string is invalid with respect to ModelsLocation
  */
  public static ModelsLocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsLocation.class);
  }

 /**
  * Convert an instance of ModelsLocation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

