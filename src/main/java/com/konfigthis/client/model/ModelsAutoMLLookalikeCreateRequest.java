/*
 * Hyperplane API Gateway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ModelsLookalikeLabel;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ModelsAutoMLLookalikeCreateRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ModelsAutoMLLookalikeCreateRequest {
  public static final String SERIALIZED_NAME_ENGAGEMENT_TYPE = "engagement_type";
  @SerializedName(SERIALIZED_NAME_ENGAGEMENT_TYPE)
  private String engagementType;

  public static final String SERIALIZED_NAME_NEGATIVE_LABEL_USERS = "negative_label_users";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_LABEL_USERS)
  private List<ModelsLookalikeLabel> negativeLabelUsers = null;

  public static final String SERIALIZED_NAME_POSITIVE_LABEL_USERS = "positive_label_users";
  @SerializedName(SERIALIZED_NAME_POSITIVE_LABEL_USERS)
  private List<ModelsLookalikeLabel> positiveLabelUsers = new ArrayList<>();

  public static final String SERIALIZED_NAME_RUN_DESCRIPTION = "run_description";
  @SerializedName(SERIALIZED_NAME_RUN_DESCRIPTION)
  private String runDescription;

  public ModelsAutoMLLookalikeCreateRequest() {
  }

  public ModelsAutoMLLookalikeCreateRequest engagementType(String engagementType) {
    
    
    
    
    this.engagementType = engagementType;
    return this;
  }

   /**
   * Intended use case of this product, between MULTI_ENGAGE and SINGLE_ENGAGE
   * @return engagementType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Intended use case of this product, between MULTI_ENGAGE and SINGLE_ENGAGE")

  public String getEngagementType() {
    return engagementType;
  }


  public void setEngagementType(String engagementType) {
    
    
    
    this.engagementType = engagementType;
  }


  public ModelsAutoMLLookalikeCreateRequest negativeLabelUsers(List<ModelsLookalikeLabel> negativeLabelUsers) {
    
    
    
    
    this.negativeLabelUsers = negativeLabelUsers;
    return this;
  }

  public ModelsAutoMLLookalikeCreateRequest addNegativeLabelUsersItem(ModelsLookalikeLabel negativeLabelUsersItem) {
    if (this.negativeLabelUsers == null) {
      this.negativeLabelUsers = new ArrayList<>();
    }
    this.negativeLabelUsers.add(negativeLabelUsersItem);
    return this;
  }

   /**
   * List of negative users in lookalike model. Model will be trained to identify users dissimilar to these users. If None, negative users will be generated from data. List length must be either 0 or greater than 10.
   * @return negativeLabelUsers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of negative users in lookalike model. Model will be trained to identify users dissimilar to these users. If None, negative users will be generated from data. List length must be either 0 or greater than 10.")

  public List<ModelsLookalikeLabel> getNegativeLabelUsers() {
    return negativeLabelUsers;
  }


  public void setNegativeLabelUsers(List<ModelsLookalikeLabel> negativeLabelUsers) {
    
    
    
    this.negativeLabelUsers = negativeLabelUsers;
  }


  public ModelsAutoMLLookalikeCreateRequest positiveLabelUsers(List<ModelsLookalikeLabel> positiveLabelUsers) {
    
    
    
    
    this.positiveLabelUsers = positiveLabelUsers;
    return this;
  }

  public ModelsAutoMLLookalikeCreateRequest addPositiveLabelUsersItem(ModelsLookalikeLabel positiveLabelUsersItem) {
    this.positiveLabelUsers.add(positiveLabelUsersItem);
    return this;
  }

   /**
   * List of positive users in lookalike model. Model will be trained to identify users similar to these users. This list must contain at least ten elements.
   * @return positiveLabelUsers
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "List of positive users in lookalike model. Model will be trained to identify users similar to these users. This list must contain at least ten elements.")

  public List<ModelsLookalikeLabel> getPositiveLabelUsers() {
    return positiveLabelUsers;
  }


  public void setPositiveLabelUsers(List<ModelsLookalikeLabel> positiveLabelUsers) {
    
    
    
    this.positiveLabelUsers = positiveLabelUsers;
  }


  public ModelsAutoMLLookalikeCreateRequest runDescription(String runDescription) {
    
    
    
    
    this.runDescription = runDescription;
    return this;
  }

   /**
   * Custom run description to attach to run
   * @return runDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Custom run description to attach to run")

  public String getRunDescription() {
    return runDescription;
  }


  public void setRunDescription(String runDescription) {
    
    
    
    this.runDescription = runDescription;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ModelsAutoMLLookalikeCreateRequest instance itself
   */
  public ModelsAutoMLLookalikeCreateRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsAutoMLLookalikeCreateRequest modelsAutoMLLookalikeCreateRequest = (ModelsAutoMLLookalikeCreateRequest) o;
    return Objects.equals(this.engagementType, modelsAutoMLLookalikeCreateRequest.engagementType) &&
        Objects.equals(this.negativeLabelUsers, modelsAutoMLLookalikeCreateRequest.negativeLabelUsers) &&
        Objects.equals(this.positiveLabelUsers, modelsAutoMLLookalikeCreateRequest.positiveLabelUsers) &&
        Objects.equals(this.runDescription, modelsAutoMLLookalikeCreateRequest.runDescription)&&
        Objects.equals(this.additionalProperties, modelsAutoMLLookalikeCreateRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(engagementType, negativeLabelUsers, positiveLabelUsers, runDescription, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsAutoMLLookalikeCreateRequest {\n");
    sb.append("    engagementType: ").append(toIndentedString(engagementType)).append("\n");
    sb.append("    negativeLabelUsers: ").append(toIndentedString(negativeLabelUsers)).append("\n");
    sb.append("    positiveLabelUsers: ").append(toIndentedString(positiveLabelUsers)).append("\n");
    sb.append("    runDescription: ").append(toIndentedString(runDescription)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("engagement_type");
    openapiFields.add("negative_label_users");
    openapiFields.add("positive_label_users");
    openapiFields.add("run_description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("engagement_type");
    openapiRequiredFields.add("positive_label_users");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsAutoMLLookalikeCreateRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelsAutoMLLookalikeCreateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsAutoMLLookalikeCreateRequest is not found in the empty JSON string", ModelsAutoMLLookalikeCreateRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModelsAutoMLLookalikeCreateRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("engagement_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engagement_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engagement_type").toString()));
      }
      if (jsonObj.get("negative_label_users") != null && !jsonObj.get("negative_label_users").isJsonNull()) {
        JsonArray jsonArraynegativeLabelUsers = jsonObj.getAsJsonArray("negative_label_users");
        if (jsonArraynegativeLabelUsers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("negative_label_users").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `negative_label_users` to be an array in the JSON string but got `%s`", jsonObj.get("negative_label_users").toString()));
          }

          // validate the optional field `negative_label_users` (array)
          for (int i = 0; i < jsonArraynegativeLabelUsers.size(); i++) {
            ModelsLookalikeLabel.validateJsonObject(jsonArraynegativeLabelUsers.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("positive_label_users").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `positive_label_users` to be an array in the JSON string but got `%s`", jsonObj.get("positive_label_users").toString()));
      }

      JsonArray jsonArraypositiveLabelUsers = jsonObj.getAsJsonArray("positive_label_users");
      // validate the required field `positive_label_users` (array)
      for (int i = 0; i < jsonArraypositiveLabelUsers.size(); i++) {
        ModelsLookalikeLabel.validateJsonObject(jsonArraypositiveLabelUsers.get(i).getAsJsonObject());
      };
      if ((jsonObj.get("run_description") != null && !jsonObj.get("run_description").isJsonNull()) && !jsonObj.get("run_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `run_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("run_description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsAutoMLLookalikeCreateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsAutoMLLookalikeCreateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsAutoMLLookalikeCreateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsAutoMLLookalikeCreateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsAutoMLLookalikeCreateRequest>() {
           @Override
           public void write(JsonWriter out, ModelsAutoMLLookalikeCreateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsAutoMLLookalikeCreateRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ModelsAutoMLLookalikeCreateRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsAutoMLLookalikeCreateRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsAutoMLLookalikeCreateRequest
  * @throws IOException if the JSON string is invalid with respect to ModelsAutoMLLookalikeCreateRequest
  */
  public static ModelsAutoMLLookalikeCreateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsAutoMLLookalikeCreateRequest.class);
  }

 /**
  * Convert an instance of ModelsAutoMLLookalikeCreateRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

