/*
 * Hyperplane API Gateway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ModelsFacetWeightObject;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Defines a persona. Stores various weighted facets including their interests, demographics, location, company affinity, as well as predefined personas.
 */
@ApiModel(description = "Defines a persona. Stores various weighted facets including their interests, demographics, location, company affinity, as well as predefined personas.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ModelsPersonaCreateRequest {
  public static final String SERIALIZED_NAME_COMPANY_FACETS = "company_facets";
  @SerializedName(SERIALIZED_NAME_COMPANY_FACETS)
  private List<ModelsFacetWeightObject> companyFacets = null;

  public static final String SERIALIZED_NAME_DEMOGRAPHIC_FACETS = "demographic_facets";
  @SerializedName(SERIALIZED_NAME_DEMOGRAPHIC_FACETS)
  private List<ModelsFacetWeightObject> demographicFacets = null;

  public static final String SERIALIZED_NAME_INTEREST_FACETS = "interest_facets";
  @SerializedName(SERIALIZED_NAME_INTEREST_FACETS)
  private List<ModelsFacetWeightObject> interestFacets = null;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<String> locations = null;

  public static final String SERIALIZED_NAME_PERSONA_NAME = "persona_name";
  @SerializedName(SERIALIZED_NAME_PERSONA_NAME)
  private String personaName;

  public static final String SERIALIZED_NAME_PRE_DEFINED_PERSONAS = "pre_defined_personas";
  @SerializedName(SERIALIZED_NAME_PRE_DEFINED_PERSONAS)
  private List<ModelsFacetWeightObject> preDefinedPersonas = null;

  public ModelsPersonaCreateRequest() {
  }

  public ModelsPersonaCreateRequest companyFacets(List<ModelsFacetWeightObject> companyFacets) {
    
    
    
    
    this.companyFacets = companyFacets;
    return this;
  }

  public ModelsPersonaCreateRequest addCompanyFacetsItem(ModelsFacetWeightObject companyFacetsItem) {
    if (this.companyFacets == null) {
      this.companyFacets = new ArrayList<>();
    }
    this.companyFacets.add(companyFacetsItem);
    return this;
  }

   /**
   * Optional list of behavioral facet component objects. Each object outlines how a user&#39;s likelihood to consume from a particular company&#39;s products and how much it contributes to the persona definition. If left empty, no company-based scoring is done. Company facets can be found by listing personas of facet type &#39;company&#39;. Facet name must be a valid company facet in the persona taxonomy.
   * @return companyFacets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional list of behavioral facet component objects. Each object outlines how a user's likelihood to consume from a particular company's products and how much it contributes to the persona definition. If left empty, no company-based scoring is done. Company facets can be found by listing personas of facet type 'company'. Facet name must be a valid company facet in the persona taxonomy.")

  public List<ModelsFacetWeightObject> getCompanyFacets() {
    return companyFacets;
  }


  public void setCompanyFacets(List<ModelsFacetWeightObject> companyFacets) {
    
    
    
    this.companyFacets = companyFacets;
  }


  public ModelsPersonaCreateRequest demographicFacets(List<ModelsFacetWeightObject> demographicFacets) {
    
    
    
    
    this.demographicFacets = demographicFacets;
    return this;
  }

  public ModelsPersonaCreateRequest addDemographicFacetsItem(ModelsFacetWeightObject demographicFacetsItem) {
    if (this.demographicFacets == null) {
      this.demographicFacets = new ArrayList<>();
    }
    this.demographicFacets.add(demographicFacetsItem);
    return this;
  }

   /**
   * Optional list of interest facet component objects. Defines how much each demographic attribute (location, affluence, household composition, etc.)  weighs in the persona. If left empty, no demographic-based scoring is done. Demographic facets can be found by listing personas of facet type &#39;demographic&#39;. Facet name must be a valid demographic facet in the persona taxonomy.
   * @return demographicFacets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional list of interest facet component objects. Defines how much each demographic attribute (location, affluence, household composition, etc.)  weighs in the persona. If left empty, no demographic-based scoring is done. Demographic facets can be found by listing personas of facet type 'demographic'. Facet name must be a valid demographic facet in the persona taxonomy.")

  public List<ModelsFacetWeightObject> getDemographicFacets() {
    return demographicFacets;
  }


  public void setDemographicFacets(List<ModelsFacetWeightObject> demographicFacets) {
    
    
    
    this.demographicFacets = demographicFacets;
  }


  public ModelsPersonaCreateRequest interestFacets(List<ModelsFacetWeightObject> interestFacets) {
    
    
    
    
    this.interestFacets = interestFacets;
    return this;
  }

  public ModelsPersonaCreateRequest addInterestFacetsItem(ModelsFacetWeightObject interestFacetsItem) {
    if (this.interestFacets == null) {
      this.interestFacets = new ArrayList<>();
    }
    this.interestFacets.add(interestFacetsItem);
    return this;
  }

   /**
   * Optional list of interest facet component objects. Each object represents how much an interest weighs in the persona. If left empty, no interest-based scoring is done. Interests can be found by listing personas of facet type &#39;interest&#39;. Facet name must be a valid interest in the persona taxonomy.
   * @return interestFacets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional list of interest facet component objects. Each object represents how much an interest weighs in the persona. If left empty, no interest-based scoring is done. Interests can be found by listing personas of facet type 'interest'. Facet name must be a valid interest in the persona taxonomy.")

  public List<ModelsFacetWeightObject> getInterestFacets() {
    return interestFacets;
  }


  public void setInterestFacets(List<ModelsFacetWeightObject> interestFacets) {
    
    
    
    this.interestFacets = interestFacets;
  }


  public ModelsPersonaCreateRequest locations(List<String> locations) {
    
    
    
    
    this.locations = locations;
    return this;
  }

  public ModelsPersonaCreateRequest addLocationsItem(String locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

   /**
   * Optional list of zip codes or city ids to filter users by. If left empty, no location-based filtering is done.
   * @return locations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional list of zip codes or city ids to filter users by. If left empty, no location-based filtering is done.")

  public List<String> getLocations() {
    return locations;
  }


  public void setLocations(List<String> locations) {
    
    
    
    this.locations = locations;
  }


  public ModelsPersonaCreateRequest personaName(String personaName) {
    
    
    
    
    this.personaName = personaName;
    return this;
  }

   /**
   * A name for describing this persona. Used for easy human-friendly identification.
   * @return personaName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Young Professional", required = true, value = "A name for describing this persona. Used for easy human-friendly identification.")

  public String getPersonaName() {
    return personaName;
  }


  public void setPersonaName(String personaName) {
    
    
    
    this.personaName = personaName;
  }


  public ModelsPersonaCreateRequest preDefinedPersonas(List<ModelsFacetWeightObject> preDefinedPersonas) {
    
    
    
    
    this.preDefinedPersonas = preDefinedPersonas;
    return this;
  }

  public ModelsPersonaCreateRequest addPreDefinedPersonasItem(ModelsFacetWeightObject preDefinedPersonasItem) {
    if (this.preDefinedPersonas == null) {
      this.preDefinedPersonas = new ArrayList<>();
    }
    this.preDefinedPersonas.add(preDefinedPersonasItem);
    return this;
  }

   /**
   * Optional list of pre-defined persona facet component objects. Each object outlines how a pre-defined persona (&#39;Car Owners&#39; or &#39;International Travelers&#39;) contributes to the persona definition. If left empty, no predefined personas are incorporated into the persona definition. Pre-defined personas have been optimized for financial use cases and have been validated at scale. They can be found by listing personas of facet type &#39;pre_defined_persona&#39;. Facet name must be a valid pre-defined persona facet in the persona taxonomy.
   * @return preDefinedPersonas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional list of pre-defined persona facet component objects. Each object outlines how a pre-defined persona ('Car Owners' or 'International Travelers') contributes to the persona definition. If left empty, no predefined personas are incorporated into the persona definition. Pre-defined personas have been optimized for financial use cases and have been validated at scale. They can be found by listing personas of facet type 'pre_defined_persona'. Facet name must be a valid pre-defined persona facet in the persona taxonomy.")

  public List<ModelsFacetWeightObject> getPreDefinedPersonas() {
    return preDefinedPersonas;
  }


  public void setPreDefinedPersonas(List<ModelsFacetWeightObject> preDefinedPersonas) {
    
    
    
    this.preDefinedPersonas = preDefinedPersonas;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ModelsPersonaCreateRequest instance itself
   */
  public ModelsPersonaCreateRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsPersonaCreateRequest modelsPersonaCreateRequest = (ModelsPersonaCreateRequest) o;
    return Objects.equals(this.companyFacets, modelsPersonaCreateRequest.companyFacets) &&
        Objects.equals(this.demographicFacets, modelsPersonaCreateRequest.demographicFacets) &&
        Objects.equals(this.interestFacets, modelsPersonaCreateRequest.interestFacets) &&
        Objects.equals(this.locations, modelsPersonaCreateRequest.locations) &&
        Objects.equals(this.personaName, modelsPersonaCreateRequest.personaName) &&
        Objects.equals(this.preDefinedPersonas, modelsPersonaCreateRequest.preDefinedPersonas)&&
        Objects.equals(this.additionalProperties, modelsPersonaCreateRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(companyFacets, demographicFacets, interestFacets, locations, personaName, preDefinedPersonas, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsPersonaCreateRequest {\n");
    sb.append("    companyFacets: ").append(toIndentedString(companyFacets)).append("\n");
    sb.append("    demographicFacets: ").append(toIndentedString(demographicFacets)).append("\n");
    sb.append("    interestFacets: ").append(toIndentedString(interestFacets)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    personaName: ").append(toIndentedString(personaName)).append("\n");
    sb.append("    preDefinedPersonas: ").append(toIndentedString(preDefinedPersonas)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("company_facets");
    openapiFields.add("demographic_facets");
    openapiFields.add("interest_facets");
    openapiFields.add("locations");
    openapiFields.add("persona_name");
    openapiFields.add("pre_defined_personas");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("persona_name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelsPersonaCreateRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelsPersonaCreateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsPersonaCreateRequest is not found in the empty JSON string", ModelsPersonaCreateRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModelsPersonaCreateRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("company_facets") != null && !jsonObj.get("company_facets").isJsonNull()) {
        JsonArray jsonArraycompanyFacets = jsonObj.getAsJsonArray("company_facets");
        if (jsonArraycompanyFacets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("company_facets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `company_facets` to be an array in the JSON string but got `%s`", jsonObj.get("company_facets").toString()));
          }

          // validate the optional field `company_facets` (array)
          for (int i = 0; i < jsonArraycompanyFacets.size(); i++) {
            ModelsFacetWeightObject.validateJsonObject(jsonArraycompanyFacets.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("demographic_facets") != null && !jsonObj.get("demographic_facets").isJsonNull()) {
        JsonArray jsonArraydemographicFacets = jsonObj.getAsJsonArray("demographic_facets");
        if (jsonArraydemographicFacets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("demographic_facets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `demographic_facets` to be an array in the JSON string but got `%s`", jsonObj.get("demographic_facets").toString()));
          }

          // validate the optional field `demographic_facets` (array)
          for (int i = 0; i < jsonArraydemographicFacets.size(); i++) {
            ModelsFacetWeightObject.validateJsonObject(jsonArraydemographicFacets.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("interest_facets") != null && !jsonObj.get("interest_facets").isJsonNull()) {
        JsonArray jsonArrayinterestFacets = jsonObj.getAsJsonArray("interest_facets");
        if (jsonArrayinterestFacets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("interest_facets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `interest_facets` to be an array in the JSON string but got `%s`", jsonObj.get("interest_facets").toString()));
          }

          // validate the optional field `interest_facets` (array)
          for (int i = 0; i < jsonArrayinterestFacets.size(); i++) {
            ModelsFacetWeightObject.validateJsonObject(jsonArrayinterestFacets.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
      }
      if (!jsonObj.get("persona_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `persona_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("persona_name").toString()));
      }
      if (jsonObj.get("pre_defined_personas") != null && !jsonObj.get("pre_defined_personas").isJsonNull()) {
        JsonArray jsonArraypreDefinedPersonas = jsonObj.getAsJsonArray("pre_defined_personas");
        if (jsonArraypreDefinedPersonas != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pre_defined_personas").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pre_defined_personas` to be an array in the JSON string but got `%s`", jsonObj.get("pre_defined_personas").toString()));
          }

          // validate the optional field `pre_defined_personas` (array)
          for (int i = 0; i < jsonArraypreDefinedPersonas.size(); i++) {
            ModelsFacetWeightObject.validateJsonObject(jsonArraypreDefinedPersonas.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsPersonaCreateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsPersonaCreateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsPersonaCreateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsPersonaCreateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsPersonaCreateRequest>() {
           @Override
           public void write(JsonWriter out, ModelsPersonaCreateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsPersonaCreateRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ModelsPersonaCreateRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelsPersonaCreateRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelsPersonaCreateRequest
  * @throws IOException if the JSON string is invalid with respect to ModelsPersonaCreateRequest
  */
  public static ModelsPersonaCreateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsPersonaCreateRequest.class);
  }

 /**
  * Convert an instance of ModelsPersonaCreateRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

