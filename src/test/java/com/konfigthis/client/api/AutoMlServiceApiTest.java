/*
 * Hyperplane API Gateway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ModelsAutoMLBatchScoresCreateResponse;
import com.konfigthis.client.model.ModelsAutoMLLookalikeCreateRequest;
import com.konfigthis.client.model.ModelsAutoMLLookalikeCreateResponse;
import com.konfigthis.client.model.ModelsAutoMLRunGetIdResponse;
import com.konfigthis.client.model.ModelsAutoMLRunUsersGetRequest;
import com.konfigthis.client.model.ModelsAutoMLRunUsersGetResponse;
import com.konfigthis.client.model.ModelsAutoMLRunsGetResponse;
import com.konfigthis.client.model.ModelsAutoMLUsersGetResponse;
import com.konfigthis.client.model.ModelsLookalikeLabel;
import com.konfigthis.client.model.ModelsTagCategoricalAttributeFilter;
import com.konfigthis.client.model.ModelsUserMetadata;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AutoMlServiceApi
 */
@Disabled
public class AutoMlServiceApiTest {

    private static AutoMlServiceApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AutoMlServiceApi(apiClient);
    }

    /**
     * Create an AutoML lookalike request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLookalikeRequestTest() throws ApiException {
        String engagementType = null;
        List<ModelsLookalikeLabel> positiveLabelUsers = null;
        List<ModelsLookalikeLabel> negativeLabelUsers = null;
        String runDescription = null;
        String modelVersion = null;
        String moduleId = null;
        ModelsAutoMLLookalikeCreateResponse response = api.createLookalikeRequest(engagementType, positiveLabelUsers)
                .negativeLabelUsers(negativeLabelUsers)
                .runDescription(runDescription)
                .modelVersion(modelVersion)
                .moduleId(moduleId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all AutoML runs in a specified module
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllRunsTest() throws ApiException {
        String moduleId = null;
        ModelsAutoMLRunsGetResponse response = api.getAllRuns()
                .moduleId(moduleId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get available users for training an AutoML run in a specified module
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailableUsersTest() throws ApiException {
        String moduleId = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        ModelsAutoMLUsersGetResponse response = api.getAvailableUsers()
                .moduleId(moduleId)
                .pageNumber(pageNumber)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

    /**
     * Get status of a specified AutoML run
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRunStatusTest() throws ApiException {
        String runId = null;
        String response = api.getRunStatus(runId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get status of the batch scores request for an AutoML run
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRunStatusBatchScoresTest() throws ApiException {
        String runId = null;
        String response = api.getRunStatusBatchScores(runId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get run summary for a specified AutoML run
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRunSummaryTest() throws ApiException {
        String runId = null;
        ModelsAutoMLRunGetIdResponse response = api.getRunSummary(runId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get top users from a specified AutoML run excluding training users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTopUsersExcludingTrainingTest() throws ApiException {
        String runId = null;
        List<ModelsUserMetadata> allowUsers = null;
        List<ModelsUserMetadata> blockUsers = null;
        List<ModelsTagCategoricalAttributeFilter> tagFilters = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        ModelsAutoMLRunUsersGetResponse response = api.getTopUsersExcludingTraining(runId)
                .allowUsers(allowUsers)
                .blockUsers(blockUsers)
                .tagFilters(tagFilters)
                .pageNumber(pageNumber)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

    /**
     * Rerun inference on latest user snapshots to update scores
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rerunInferenceTest() throws ApiException {
        String runId = null;
        ModelsAutoMLLookalikeCreateResponse response = api.rerunInference(runId)
                .execute();
        // TODO: test validations
    }

    /**
     * Rerun the inference and store the updated scores in the output connection of the module
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rerunInferenceScoresTest() throws ApiException {
        String runId = null;
        String moduleId = null;
        ModelsAutoMLBatchScoresCreateResponse response = api.rerunInferenceScores(runId)
                .moduleId(moduleId)
                .execute();
        // TODO: test validations
    }

}
